<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.jetbrains.kotlin.android)&#10;    id(&quot;com.google.devtools.ksp&quot;)&#10;    id(&quot;com.google.dagger.hilt.android&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.cryptocurrencyapp&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.cryptocurrencyapp&quot;&#10;        minSdk = 24&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        vectorDrawables {&#10;            useSupportLibrary = true&#10;        }&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_17&#10;        targetCompatibility = JavaVersion.VERSION_17&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;17&quot;&#10;        freeCompilerArgs += listOf(&#10;            &quot;-Xjvm-default=all&quot;&#10;        )&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = &quot;1.5.1&quot;&#10;    }&#10;    packaging {&#10;        resources {&#10;            excludes += &quot;/META-INF/{AL2.0,LGPL2.1}&quot;&#10;        }&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    //Retrofit &amp;&amp; GSON&#10;    implementation(libs.converter.gson)&#10;    implementation (libs.retrofit)&#10;    //hilt&#10;    implementation(libs.hilt.android.v2511)&#10;    implementation(libs.androidx.navigation.runtime.ktx)&#10;    ksp(libs.hilt.android.compiler.v2511)&#10;    implementation (libs.androidx.hilt.navigation.compose.v100)&#10;    implementation (&quot;androidx.navigation:navigation-compose:2.8.6&quot;)&#10;&#10;&#10;&#10;    implementation (libs.google.accompanist.flowlayout)&#10;    //coroutines&#10;    implementation(libs.kotlinx.coroutines.android)&#10;&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.jetbrains.kotlin.android)&#10;    id(&quot;com.google.devtools.ksp&quot;)&#10;    id(&quot;com.google.dagger.hilt.android&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.cryptocurrencyapp&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.cryptocurrencyapp&quot;&#10;        minSdk = 24&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        vectorDrawables {&#10;            useSupportLibrary = true&#10;        }&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_17&#10;        targetCompatibility = JavaVersion.VERSION_17&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;17&quot;&#10;        freeCompilerArgs += listOf(&#10;            &quot;-Xjvm-default=all&quot;&#10;        )&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = &quot;1.5.1&quot;&#10;    }&#10;    packaging {&#10;        resources {&#10;            excludes += &quot;/META-INF/{AL2.0,LGPL2.1}&quot;&#10;        }&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    //Retrofit &amp;&amp; GSON&#10;    implementation(libs.converter.gson)&#10;    implementation (libs.retrofit)&#10;    //hilt&#10;    implementation(libs.hilt.android.v2511)&#10;    implementation(libs.androidx.navigation.runtime.ktx)&#10;    ksp(libs.hilt.android.compiler.v2511)&#10;    implementation (libs.androidx.hilt.navigation.compose.v100)&#10;    implementation (&quot;androidx.navigation:navigation-compose:2.8.6&quot;)&#10;&#10;    // HTML to Text Processing - أبسط وأكثر استقراراً&#10;    implementation (&quot;org.jsoup:jsoup:1.17.2&quot;)&#10;&#10;    implementation (libs.google.accompanist.flowlayout)&#10;    //coroutines&#10;    implementation(libs.kotlinx.coroutines.android)&#10;&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;!-- أذونات الإنترنت وفحص حالة الشبكة --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;.CoinApplication&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.CryptoCurrencyApp&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &#10;        &lt;activity&#10;            android:name=&quot;.presentation.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.CryptoCurrencyApp&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/common/NetworkManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/common/NetworkManager.kt" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.common&#10;&#10;import android.content.Context&#10;import android.net.ConnectivityManager&#10;import android.net.NetworkCapabilities&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.State&#10;import androidx.compose.runtime.produceState&#10;import androidx.compose.ui.platform.LocalContext&#10;import kotlinx.coroutines.delay&#10;&#10;class NetworkManager(private val context: Context) {&#10;    &#10;    fun isNetworkAvailable(): Boolean {&#10;        val connectivityManager = context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager&#10;        val network = connectivityManager.activeNetwork ?: return false&#10;        val activeNetwork = connectivityManager.getNetworkCapabilities(network) ?: return false&#10;        &#10;        return when {&#10;            activeNetwork.hasTransport(NetworkCapabilities.TRANSPORT_WIFI) -&gt; true&#10;            activeNetwork.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR) -&gt; true&#10;            activeNetwork.hasTransport(NetworkCapabilities.TRANSPORT_ETHERNET) -&gt; true&#10;            else -&gt; false&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun rememberNetworkState(): State&lt;Boolean&gt; {&#10;    val context = LocalContext.current&#10;    val networkManager = NetworkManager(context)&#10;    &#10;    return produceState(initialValue = false) {&#10;        while (true) {&#10;            value = networkManager.isNetworkAvailable()&#10;            delay(1000) // فحص كل ثانية&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/data/remote/dto/TeamMember.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/data/remote/dto/TeamMember.kt" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.data.remote.dto&#10;&#10;import com.google.gson.annotations.SerializedName&#10;&#10;data class TeamMember(&#10;    val id: String,&#10;    val name: String,&#10;    val position: String&#10;)&#10;&#10;fun TeamMember.toTeamMember(): com.example.cryptocurrencyapp.domain.model.TeamMember {&#10;    return com.example.cryptocurrencyapp.domain.model.TeamMember(&#10;        id = id,&#10;        name = name,&#10;        position = position&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/domain/model/TeamMember.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/domain/model/TeamMember.kt" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.domain.model&#10;&#10;data class TeamMember(&#10;    val id: String,&#10;    val name: String,&#10;    val position: String&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/MainActivity.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.presentation&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.cryptocurrencyapp.presentation.coin_details.CoinDetailScreen&#10;import com.example.cryptocurrencyapp.presentation.coin_list.CoinListScreen&#10;import com.example.cryptocurrencyapp.presentation.ui.theme.CryptoCurrencyAppTheme&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            CryptoCurrencyAppTheme {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    val navController = rememberNavController()&#10;                    NavHost(&#10;                        navController = navController,&#10;                        startDestination = Screen.CoinListScreen.route&#10;                    ) {&#10;                        composable(&#10;                            route = Screen.CoinListScreen.route&#10;                        ) {&#10;                            CoinListScreen(navController)&#10;                        }&#10;                        composable(&#10;                            route = Screen.CoinDetailScreen.route + &quot;/{coinId}&quot;&#10;                        ) {&#10;                            CoinDetailScreen(navController)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/Screen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/Screen.kt" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.presentation&#10;&#10;sealed class Screen(val route: String) {&#10;    object CoinListScreen : Screen(&quot;coin_list&quot;)&#10;    object CoinDetailScreen : Screen(&quot;coin_detail&quot;)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/coin_details/components/CoinTag.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/coin_details/components/CoinTag.kt" />
              <option name="originalContent" value="package com.example.cryptocurrencyapp.presentation.coin_details.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.example.cryptocurrencyapp.presentation.ui.theme.*&#10;import kotlin.random.Random&#10;&#10;@Composable&#10;fun CoinTag(&#10;    tag: String&#10;) {&#10;    val colors = listOf(&#10;        Primary.copy(alpha = 0.1f) to Primary,&#10;        Secondary.copy(alpha = 0.1f) to Secondary,&#10;        Accent1.copy(alpha = 0.1f) to Accent1,&#10;        Accent2.copy(alpha = 0.1f) to Accent2,&#10;        Accent3.copy(alpha = 0.1f) to Accent3,&#10;        Warning.copy(alpha = 0.1f) to Warning,&#10;        Info.copy(alpha = 0.1f) to Info&#10;    )&#10;&#10;    val randomColor = colors.random()&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .clip(RoundedCornerShape(12.dp))&#10;            .background(randomColor.first)&#10;            .border(&#10;                width = 1.dp,&#10;                color = randomColor.second.copy(alpha = 0.3f),&#10;                shape = RoundedCornerShape(12.dp)&#10;            )&#10;            .padding(horizontal = 12.dp, vertical = 8.dp)&#10;    ) {&#10;        Text(&#10;            text = tag,&#10;            style = MaterialTheme.typography.labelMedium,&#10;            color = randomColor.second,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.presentation.coin_details.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.example.cryptocurrencyapp.presentation.ui.theme.*&#10;import kotlin.random.Random&#10;&#10;@Composable&#10;fun CoinTag(&#10;    tag: String&#10;) {&#10;    val colors = listOf(&#10;        Primary to Primary.copy(alpha = 0.15f),&#10;        Secondary to Secondary.copy(alpha = 0.15f),&#10;        Accent1 to Accent1.copy(alpha = 0.15f),&#10;        Accent2 to Accent2.copy(alpha = 0.15f),&#10;        Accent3 to Accent3.copy(alpha = 0.15f),&#10;        Accent4 to Accent4.copy(alpha = 0.15f),&#10;        Accent5 to Accent5.copy(alpha = 0.15f),&#10;        Warning to Warning.copy(alpha = 0.15f),&#10;        Info to Info.copy(alpha = 0.15f)&#10;    )&#10;&#10;    val randomColor = colors.random()&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .background(&#10;                color = randomColor.second,&#10;                shape = RoundedCornerShape(12.dp)&#10;            )&#10;            .border(&#10;                width = 1.dp,&#10;                color = randomColor.first.copy(alpha = 0.3f),&#10;                shape = RoundedCornerShape(12.dp)&#10;            )&#10;            .padding(horizontal = 12.dp, vertical = 8.dp)&#10;    ) {&#10;        Text(&#10;            text = tag,&#10;            style = MaterialTheme.typography.labelMedium,&#10;            color = randomColor.first,&#10;            fontWeight = FontWeight.SemiBold&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/coin_details/components/TeamListItem.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/coin_details/components/TeamListItem.kt" />
              <option name="originalContent" value="package com.example.cryptocurrencyapp.presentation.coin_details.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import com.example.cryptocurrencyapp.domain.model.TeamMember&#10;import com.example.cryptocurrencyapp.presentation.ui.theme.*&#10;&#10;@Composable&#10;fun TeamListItem(&#10;    teamMember: TeamMember,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Surface(&#10;        modifier = modifier,&#10;        shape = RoundedCornerShape(12.dp),&#10;        color = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.5f)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Avatar&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(40.dp)&#10;                    .clip(CircleShape)&#10;                    .background(&#10;                        brush = androidx.compose.ui.graphics.Brush.linearGradient(&#10;                            colors = listOf(&#10;                                Primary.copy(alpha = 0.3f),&#10;                                Secondary.copy(alpha = 0.3f)&#10;                            )&#10;                        )&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(&#10;                    text = teamMember.name.take(2).uppercase(),&#10;                    style = MaterialTheme.typography.labelMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = Primary&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = teamMember.name,&#10;                    style = MaterialTheme.typography.titleSmall,&#10;                    fontWeight = FontWeight.SemiBold,&#10;                    color = MaterialTheme.colorScheme.onSurface,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;&#10;                Text(&#10;                    text = teamMember.position,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = TextSecondary,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.presentation.coin_details.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import com.example.cryptocurrencyapp.domain.model.TeamMember&#10;import com.example.cryptocurrencyapp.presentation.ui.theme.*&#10;&#10;@Composable&#10;fun TeamListItem(&#10;    teamMember: TeamMember,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Box(&#10;        modifier = modifier&#10;            .background(&#10;                color = CardBackgroundGray,&#10;                shape = RoundedCornerShape(12.dp)&#10;            )&#10;            .border(&#10;                width = 1.dp,&#10;                color = BorderLight,&#10;                shape = RoundedCornerShape(12.dp)&#10;            )&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Avatar - Pure Flat Design&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(44.dp)&#10;                    .background(&#10;                        color = Secondary.copy(alpha = 0.15f),&#10;                        shape = RoundedCornerShape(12.dp)&#10;                    )&#10;                    .border(&#10;                        width = 1.dp,&#10;                        color = Secondary.copy(alpha = 0.3f),&#10;                        shape = RoundedCornerShape(12.dp)&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(&#10;                    text = teamMember.name.take(2).uppercase(),&#10;                    style = MaterialTheme.typography.labelMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = Secondary&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = teamMember.name,&#10;                    style = MaterialTheme.typography.titleSmall,&#10;                    fontWeight = FontWeight.SemiBold,&#10;                    color = TextPrimary,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(2.dp))&#10;&#10;                Text(&#10;                    text = teamMember.position,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = TextSecondary,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/coin_list/CoinListState.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/coin_list/CoinListState.kt" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.presentation.coin_list&#10;&#10;import com.example.cryptocurrencyapp.domain.model.Coin&#10;&#10;data class CoinListState(&#10;    val isLoading: Boolean = false,&#10;    val coins: List&lt;Coin&gt; = emptyList(),&#10;    val error: String = &quot;&quot;&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/coin_list/CoinListViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/coin_list/CoinListViewModel.kt" />
              <option name="originalContent" value="package com.example.cryptocurrencyapp.presentation.coin_list&#10;&#10;import androidx.compose.runtime.State&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.cryptocurrencyapp.common.Resource&#10;import com.example.cryptocurrencyapp.domain.use_case.get_coins.GetCoinsUseCase&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.launchIn&#10;import kotlinx.coroutines.flow.onEach&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class CoinListViewModel @Inject constructor(&#10;    private val getCoinsUseCase: GetCoinsUseCase&#10;) : ViewModel() {&#10;&#10;    private val _state = mutableStateOf(CoinListState())&#10;    val state: State&lt;CoinListState&gt; = _state&#10;&#10;    init {&#10;        getCoins()&#10;    }&#10;&#10;    private fun getCoins() {&#10;        getCoinsUseCase().onEach { result -&gt;&#10;            when(result) {&#10;                is Resource.Success -&gt; {&#10;                    _state.value = CoinListState(coins = result.data ?: emptyList())&#10;                }&#10;                is Resource.Error -&gt; {&#10;                    _state.value = CoinListState(&#10;                        error = result.message ?: &quot;An unexpected error occurred&quot;&#10;                    )&#10;                }&#10;                is Resource.Loading -&gt; {&#10;                    _state.value = CoinListState(isLoading = true)&#10;                }&#10;            }&#10;        }.launchIn(viewModelScope)&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.presentation.coin_list&#10;&#10;import androidx.compose.runtime.State&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.cryptocurrencyapp.common.Resource&#10;import com.example.cryptocurrencyapp.domain.use_case.get_coins.GetCoinsUseCase&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.flow.launchIn&#10;import kotlinx.coroutines.flow.onEach&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class CoinListViewModel @Inject constructor(&#10;    private val getCoinsUseCase: GetCoinsUseCase&#10;) : ViewModel() {&#10;&#10;    private val _state = mutableStateOf(CoinListState())&#10;    val state: State&lt;CoinListState&gt; = _state&#10;&#10;    private val _isNetworkError = mutableStateOf(false)&#10;    val isNetworkError: State&lt;Boolean&gt; = _isNetworkError&#10;&#10;    init {&#10;        getCoins()&#10;    }&#10;&#10;    fun getCoins() {&#10;        getCoinsUseCase().onEach { result -&gt;&#10;            when(result) {&#10;                is Resource.Success -&gt; {&#10;                    _state.value = CoinListState(coins = result.data ?: emptyList())&#10;                    _isNetworkError.value = false&#10;                }&#10;                is Resource.Error -&gt; {&#10;                    // فحص إذا كان الخطأ بسبب الشبكة&#10;                    val isNetworkIssue = result.message?.let { message -&gt;&#10;                        message.contains(&quot;network&quot;, ignoreCase = true) ||&#10;                        message.contains(&quot;internet&quot;, ignoreCase = true) ||&#10;                        message.contains(&quot;connection&quot;, ignoreCase = true) ||&#10;                        message.contains(&quot;timeout&quot;, ignoreCase = true) ||&#10;                        message.contains(&quot;unable to resolve host&quot;, ignoreCase = true) ||&#10;                        message.contains(&quot;socket&quot;, ignoreCase = true) ||&#10;                        message.contains(&quot;unreachable&quot;, ignoreCase = true)&#10;                    } ?: false&#10;                    &#10;                    if (isNetworkIssue) {&#10;                        _isNetworkError.value = true&#10;                        _state.value = CoinListState(&#10;                            error = &quot;لا يوجد اتصال بالإنترنت&quot;&#10;                        )&#10;                    } else {&#10;                        _isNetworkError.value = false&#10;                        _state.value = CoinListState(&#10;                            error = result.message ?: &quot;حدث خطأ غير متوقع&quot;&#10;                        )&#10;                    }&#10;                }&#10;                is Resource.Loading -&gt; {&#10;                    _state.value = CoinListState(isLoading = true)&#10;                }&#10;            }&#10;        }.launchIn(viewModelScope)&#10;    }&#10;&#10;    fun retryConnection() {&#10;        _isNetworkError.value = false&#10;        _state.value = CoinListState(isLoading = true)&#10;        viewModelScope.launch {&#10;            delay(1000) // تأخير قصير قبل إعادة المحاولة&#10;            getCoins()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/coin_list/components/CoinListItem.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/coin_list/components/CoinListItem.kt" />
              <option name="originalContent" value="package com.example.cryptocurrencyapp.presentation.coin_list.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.cryptocurrencyapp.domain.model.Coin&#10;import com.example.cryptocurrencyapp.presentation.ui.theme.*&#10;&#10;@Composable&#10;fun CoinListItem(&#10;    coin: Coin,&#10;    onItemClick: (Coin) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable { onItemClick(coin) },&#10;        elevation = CardDefaults.cardElevation(&#10;            defaultElevation = 2.dp,&#10;            pressedElevation = 8.dp&#10;        ),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        ),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                // Coin Avatar/Icon&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(48.dp)&#10;                        .clip(CircleShape)&#10;                        .background(&#10;                            brush = androidx.compose.ui.graphics.Brush.linearGradient(&#10;                                colors = listOf(&#10;                                    Primary.copy(alpha = 0.2f),&#10;                                    Secondary.copy(alpha = 0.2f)&#10;                                )&#10;                            )&#10;                        ),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = coin.symbol.take(3).uppercase(),&#10;                        style = MaterialTheme.typography.labelLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Primary,&#10;                        fontSize = 12.sp&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;&#10;                Column(&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&#10;                        text = coin.name,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = MaterialTheme.colorScheme.onSurface,&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = coin.symbol.uppercase(),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = TextSecondary,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;&#10;                        // Rank Badge&#10;                        Surface(&#10;                            shape = RoundedCornerShape(8.dp),&#10;                            color = if (coin.rank &lt;= 10) {&#10;                                Success.copy(alpha = 0.1f)&#10;                            } else if (coin.rank &lt;= 50) {&#10;                                Warning.copy(alpha = 0.1f)&#10;                            } else {&#10;                                TextSecondary.copy(alpha = 0.1f)&#10;                            }&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;#${coin.rank}&quot;,&#10;                                style = MaterialTheme.typography.labelSmall,&#10;                                color = if (coin.rank &lt;= 10) {&#10;                                    Success&#10;                                } else if (coin.rank &lt;= 50) {&#10;                                    Warning&#10;                                } else {&#10;                                    TextSecondary&#10;                                },&#10;                                fontWeight = FontWeight.Medium,&#10;                                modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Column(&#10;                horizontalAlignment = Alignment.End&#10;            ) {&#10;                // Activity Indicator&#10;                Surface(&#10;                    shape = CircleShape,&#10;                    color = if (coin.isActive) Success else Error,&#10;                    modifier = Modifier.size(12.dp)&#10;                ) {}&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = if (coin.isActive) &quot;Active&quot; else &quot;Inactive&quot;,&#10;                    style = MaterialTheme.typography.labelSmall,&#10;                    color = if (coin.isActive) Success else Error,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.presentation.coin_list.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.cryptocurrencyapp.domain.model.Coin&#10;import com.example.cryptocurrencyapp.presentation.ui.theme.*&#10;&#10;@Composable&#10;fun CoinListItem(&#10;    coin: Coin,&#10;    onItemClick: (Coin) -&gt; Unit&#10;) {&#10;    // Pure Flat Card Design - No Shadows&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .background(&#10;                color = SurfaceLight,&#10;                shape = RoundedCornerShape(16.dp)&#10;            )&#10;            .border(&#10;                width = 1.dp,&#10;                color = BorderLight,&#10;                shape = RoundedCornerShape(16.dp)&#10;            )&#10;            .clickable { onItemClick(coin) }&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                // Coin Avatar - Pure Flat Design&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(52.dp)&#10;                        .background(&#10;                            color = Primary.copy(alpha = 0.1f),&#10;                            shape = RoundedCornerShape(16.dp)&#10;                        )&#10;                        .border(&#10;                            width = 1.dp,&#10;                            color = Primary.copy(alpha = 0.2f),&#10;                            shape = RoundedCornerShape(16.dp)&#10;                        ),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = coin.symbol.take(3).uppercase(),&#10;                        style = MaterialTheme.typography.labelLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Primary,&#10;                        fontSize = 14.sp&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;&#10;                Column(&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&#10;                        text = coin.name,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = TextPrimary,&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = coin.symbol.uppercase(),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = TextSecondary,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;&#10;                        Spacer(modifier = Modifier.width(12.dp))&#10;&#10;                        // Rank Badge - Flat Design&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .background(&#10;                                    color = when {&#10;                                        coin.rank &lt;= 10 -&gt; Success.copy(alpha = 0.15f)&#10;                                        coin.rank &lt;= 50 -&gt; Warning.copy(alpha = 0.15f)&#10;                                        else -&gt; TextSecondary.copy(alpha = 0.15f)&#10;                                    },&#10;                                    shape = RoundedCornerShape(8.dp)&#10;                                )&#10;                                .border(&#10;                                    width = 1.dp,&#10;                                    color = when {&#10;                                        coin.rank &lt;= 10 -&gt; Success.copy(alpha = 0.3f)&#10;                                        coin.rank &lt;= 50 -&gt; Warning.copy(alpha = 0.3f)&#10;                                        else -&gt; TextSecondary.copy(alpha = 0.3f)&#10;                                    },&#10;                                    shape = RoundedCornerShape(8.dp)&#10;                                )&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;#${coin.rank}&quot;,&#10;                                style = MaterialTheme.typography.labelSmall,&#10;                                color = when {&#10;                                    coin.rank &lt;= 10 -&gt; Success&#10;                                    coin.rank &lt;= 50 -&gt; Warning&#10;                                    else -&gt; TextSecondary&#10;                                },&#10;                                fontWeight = FontWeight.SemiBold,&#10;                                modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Column(&#10;                horizontalAlignment = Alignment.End&#10;            ) {&#10;                // Activity Status - Flat Design&#10;                Box(&#10;                    modifier = Modifier&#10;                        .background(&#10;                            color = if (coin.isActive) Success.copy(alpha = 0.15f) else Error.copy(alpha = 0.15f),&#10;                            shape = RoundedCornerShape(12.dp)&#10;                        )&#10;                        .border(&#10;                            width = 1.dp,&#10;                            color = if (coin.isActive) Success.copy(alpha = 0.3f) else Error.copy(alpha = 0.3f),&#10;                            shape = RoundedCornerShape(12.dp)&#10;                        )&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier.padding(horizontal = 8.dp, vertical = 6.dp),&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .size(8.dp)&#10;                                .background(&#10;                                    color = if (coin.isActive) Success else Error,&#10;                                    shape = CircleShape&#10;                                )&#10;                        )&#10;&#10;                        Spacer(modifier = Modifier.width(6.dp))&#10;&#10;                        Text(&#10;                            text = if (coin.isActive) &quot;Active&quot; else &quot;Inactive&quot;,&#10;                            style = MaterialTheme.typography.labelSmall,&#10;                            color = if (coin.isActive) Success else Error,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/components/HtmlRichText.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/components/HtmlRichText.kt" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.presentation.components&#10;&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.sp&#10;&#10;@Composable&#10;fun HtmlText(&#10;    htmlContent: String,&#10;    modifier: Modifier = Modifier,&#10;    textColor: Color = MaterialTheme.colorScheme.onSurface&#10;) {&#10;    // تنظيف HTML بدون مكتبات خارجية - طريقة آمنة وموثوقة&#10;    val cleanText = htmlContent&#10;        .replace(&quot;&lt;p&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;/p&gt;&quot;, &quot;\n\n&quot;)&#10;        .replace(&quot;&lt;br&gt;&quot;, &quot;\n&quot;)&#10;        .replace(&quot;&lt;br/&gt;&quot;, &quot;\n&quot;)&#10;        .replace(&quot;&lt;br /&gt;&quot;, &quot;\n&quot;)&#10;        .replace(&quot;&lt;strong&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;/strong&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;b&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;/b&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;em&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;/em&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;i&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;/i&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;u&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;/u&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;h1&gt;&quot;, &quot;\n&quot;)&#10;        .replace(&quot;&lt;/h1&gt;&quot;, &quot;\n&quot;)&#10;        .replace(&quot;&lt;h2&gt;&quot;, &quot;\n&quot;)&#10;        .replace(&quot;&lt;/h2&gt;&quot;, &quot;\n&quot;)&#10;        .replace(&quot;&lt;h3&gt;&quot;, &quot;\n&quot;)&#10;        .replace(&quot;&lt;/h3&gt;&quot;, &quot;\n&quot;)&#10;        .replace(&quot;&lt;li&gt;&quot;, &quot;• &quot;)&#10;        .replace(&quot;&lt;/li&gt;&quot;, &quot;\n&quot;)&#10;        .replace(&quot;&lt;ul&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;/ul&gt;&quot;, &quot;\n&quot;)&#10;        .replace(&quot;&lt;ol&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;/ol&gt;&quot;, &quot;\n&quot;)&#10;        .replace(&quot;&amp;amp;&quot;, &quot;&amp;&quot;)&#10;        .replace(&quot;&amp;lt;&quot;, &quot;&lt;&quot;)&#10;        .replace(&quot;&amp;gt;&quot;, &quot;&gt;&quot;)&#10;        .replace(&quot;&amp;quot;&quot;, &quot;\&quot;&quot;)&#10;        .replace(&quot;&amp;#39;&quot;, &quot;'&quot;)&#10;        .replace(&quot;&amp;nbsp;&quot;, &quot; &quot;)&#10;        .replace(&quot;&amp;copy;&quot;, &quot;©&quot;)&#10;        .replace(&quot;&amp;reg;&quot;, &quot;®&quot;)&#10;        .replace(&quot;&amp;trade;&quot;, &quot;™&quot;)&#10;        .replace(Regex(&quot;&lt;[^&gt;]*&gt;&quot;), &quot;&quot;) // إزالة أي علامات HTML متبقية&#10;        .replace(Regex(&quot;\\s+&quot;), &quot; &quot;) // إزالة المسافات المتعددة&#10;        .replace(&quot;\n &quot;, &quot;\n&quot;) // تنظيف السطور&#10;        .trim()&#10;&#10;    Text(&#10;        text = cleanText,&#10;        modifier = modifier,&#10;        style = MaterialTheme.typography.bodyMedium.copy(&#10;            color = textColor,&#10;            lineHeight = 24.sp,&#10;            textAlign = TextAlign.Start&#10;        )&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/ui/theme/Color.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/ui/theme/Color.kt" />
              <option name="originalContent" value="package com.example.cryptocurrencyapp.presentation.ui.theme&#10;&#10;import androidx.compose.ui.graphics.Color&#10;&#10;// Modern Flat Design Color Palette&#10;val Purple80 = Color(0xFF6366F1)&#10;val PurpleGrey80 = Color(0xFF8B92F3)&#10;val Pink80 = Color(0xFFEC4899)&#10;&#10;val Purple40 = Color(0xFF4F46E5)&#10;val PurpleGrey40 = Color(0xFF6B7280)&#10;val Pink40 = Color(0xFFDB2777)&#10;&#10;// Custom App Colors - Modern Flat Design&#10;val Primary = Color(0xFF6366F1) // Indigo&#10;val PrimaryVariant = Color(0xFF4F46E5) // Darker Indigo&#10;val Secondary = Color(0xFF10B981) // Emerald&#10;val SecondaryVariant = Color(0xFF059669) // Darker Emerald&#10;&#10;// Background Colors&#10;val BackgroundLight = Color(0xFFFAFAFA)&#10;val BackgroundDark = Color(0xFF111827)&#10;val SurfaceLight = Color(0xFFFFFFFF)&#10;val SurfaceDark = Color(0xFF1F2937)&#10;&#10;// Text Colors&#10;val TextPrimary = Color(0xFF111827)&#10;val TextSecondary = Color(0xFF6B7280)&#10;val TextOnPrimary = Color(0xFFFFFFFF)&#10;val TextOnDark = Color(0xFFF9FAFB)&#10;&#10;// Status Colors&#10;val Success = Color(0xFF10B981)&#10;val Warning = Color(0xFFF59E0B)&#10;val Error = Color(0xFFEF4444)&#10;val Info = Color(0xFF3B82F6)&#10;&#10;// Accent Colors&#10;val Accent1 = Color(0xFF8B5CF6) // Purple&#10;val Accent2 = Color(0xFFEC4899) // Pink&#10;val Accent3 = Color(0xFF06B6D4) // Cyan&#10;&#10;// Card Colors&#10;val CardBackground = Color(0xFFFFFFFF)&#10;val CardBackgroundDark = Color(0xFF374151)&#10;val CardElevation = Color(0x08000000)&#10;&#10;// Border Colors&#10;val BorderLight = Color(0xFFE5E7EB)&#10;val BorderDark = Color(0xFF4B5563)&#10;&#10;// Price Colors&#10;val PriceUp = Color(0xFF10B981)&#10;val PriceDown = Color(0xFFEF4444)&#10;val PriceNeutral = Color(0xFF6B7280)&#10;" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.presentation.ui.theme&#10;&#10;import androidx.compose.ui.graphics.Color&#10;&#10;// Modern Flat Design Color Palette - No Gradients, Pure Colors&#10;val Purple80 = Color(0xFF7C3AED)&#10;val PurpleGrey80 = Color(0xFF6366F1)&#10;val Pink80 = Color(0xFFEC4899)&#10;&#10;val Purple40 = Color(0xFF5B21B6)&#10;val PurpleGrey40 = Color(0xFF4338CA)&#10;val Pink40 = Color(0xFFBE185D)&#10;&#10;// Custom App Colors - Pure Flat Design&#10;val Primary = Color(0xFF6366F1) // Indigo&#10;val PrimaryVariant = Color(0xFF4F46E5) // Darker Indigo&#10;val Secondary = Color(0xFF10B981) // Emerald&#10;val SecondaryVariant = Color(0xFF059669) // Darker Emerald&#10;&#10;// Background Colors - Flat&#10;val BackgroundLight = Color(0xFFF8FAFC)&#10;val BackgroundDark = Color(0xFF0F172A)&#10;val SurfaceLight = Color(0xFFFFFFFF)&#10;val SurfaceDark = Color(0xFF1E293B)&#10;&#10;// Text Colors&#10;val TextPrimary = Color(0xFF0F172A)&#10;val TextSecondary = Color(0xFF64748B)&#10;val TextOnPrimary = Color(0xFFFFFFFF)&#10;val TextOnDark = Color(0xFFF1F5F9)&#10;&#10;// Status Colors - Flat&#10;val Success = Color(0xFF22C55E)&#10;val Warning = Color(0xFFF59E0B)&#10;val Error = Color(0xFFEF4444)&#10;val Info = Color(0xFF3B82F6)&#10;&#10;// Accent Colors - Modern Flat&#10;val Accent1 = Color(0xFF8B5CF6) // Purple&#10;val Accent2 = Color(0xFFEC4899) // Pink&#10;val Accent3 = Color(0xFF06B6D4) // Cyan&#10;val Accent4 = Color(0xFFF97316) // Orange&#10;val Accent5 = Color(0xFF84CC16) // Lime&#10;&#10;// Card Colors - Pure Flat&#10;val CardBackground = Color(0xFFFFFFFF)&#10;val CardBackgroundDark = Color(0xFF334155)&#10;val CardBackgroundGray = Color(0xFFF1F5F9)&#10;val CardBackgroundBlue = Color(0xFFE0F2FE)&#10;val CardBackgroundGreen = Color(0xFFECFDF5)&#10;val CardBackgroundYellow = Color(0xFFFEFCE8)&#10;val CardBackgroundPurple = Color(0xFFF3E8FF)&#10;&#10;// Border Colors - Subtle&#10;val BorderLight = Color(0xFFE2E8F0)&#10;val BorderDark = Color(0xFF475569)&#10;&#10;// Price Colors&#10;val PriceUp = Color(0xFF22C55E)&#10;val PriceDown = Color(0xFFEF4444)&#10;val PriceNeutral = Color(0xFF64748B)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/ui/theme/Theme.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/ui/theme/Theme.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.presentation.ui.theme&#10;&#10;import android.app.Activity&#10;import android.os.Build&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.material3.dynamicDarkColorScheme&#10;import androidx.compose.material3.dynamicLightColorScheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.SideEffect&#10;import androidx.compose.ui.graphics.toArgb&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.platform.LocalView&#10;import androidx.core.view.WindowCompat&#10;&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = Primary,&#10;    onPrimary = TextOnPrimary,&#10;    primaryContainer = PrimaryVariant,&#10;    onPrimaryContainer = TextOnPrimary,&#10;    secondary = Secondary,&#10;    onSecondary = TextOnPrimary,&#10;    secondaryContainer = SecondaryVariant,&#10;    onSecondaryContainer = TextOnPrimary,&#10;    tertiary = Accent1,&#10;    onTertiary = TextOnPrimary,&#10;    background = BackgroundDark,&#10;    onBackground = TextOnDark,&#10;    surface = SurfaceDark,&#10;    onSurface = TextOnDark,&#10;    surfaceVariant = CardBackgroundDark,&#10;    onSurfaceVariant = TextOnDark,&#10;    error = Error,&#10;    onError = TextOnPrimary,&#10;    outline = BorderDark,&#10;    inverseOnSurface = TextPrimary,&#10;    inverseSurface = SurfaceLight,&#10;    inversePrimary = PrimaryVariant,&#10;    surfaceTint = Primary,&#10;    outlineVariant = BorderDark,&#10;    scrim = BackgroundDark&#10;)&#10;&#10;private val LightColorScheme = lightColorScheme(&#10;    primary = Primary,&#10;    onPrimary = TextOnPrimary,&#10;    primaryContainer = androidx.compose.ui.graphics.Color(0xFFEEF2FF),&#10;    onPrimaryContainer = PrimaryVariant,&#10;    secondary = Secondary,&#10;    onSecondary = TextOnPrimary,&#10;    secondaryContainer = androidx.compose.ui.graphics.Color(0xFFD1FAE5),&#10;    onSecondaryContainer = SecondaryVariant,&#10;    tertiary = Accent1,&#10;    onTertiary = TextOnPrimary,&#10;    background = BackgroundLight,&#10;    onBackground = TextPrimary,&#10;    surface = SurfaceLight,&#10;    onSurface = TextPrimary,&#10;    surfaceVariant = androidx.compose.ui.graphics.Color(0xFFF8FAFC),&#10;    onSurfaceVariant = TextSecondary,&#10;    error = Error,&#10;    onError = TextOnPrimary,&#10;    outline = BorderLight,&#10;    inverseOnSurface = TextOnDark,&#10;    inverseSurface = SurfaceDark,&#10;    inversePrimary = androidx.compose.ui.graphics.Color(0xFFA5B4FC),&#10;    surfaceTint = Primary,&#10;    outlineVariant = androidx.compose.ui.graphics.Color(0xFFE2E8F0),&#10;    scrim = androidx.compose.ui.graphics.Color(0x40000000)&#10;)&#10;&#10;@Composable&#10;fun CryptoCurrencyAppTheme(&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    // Dynamic color is available on Android 12+&#10;    dynamicColor: Boolean = false,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colorScheme = when {&#10;        dynamicColor &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S -&gt; {&#10;            val context = LocalContext.current&#10;            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)&#10;        }&#10;&#10;        darkTheme -&gt; DarkColorScheme&#10;        else -&gt; LightColorScheme&#10;    }&#10;    val view = LocalView.current&#10;    if (!view.isInEditMode) {&#10;        SideEffect {&#10;            val window = (view.context as Activity).window&#10;            window.statusBarColor = colorScheme.primary.toArgb()&#10;            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars = darkTheme&#10;        }&#10;    }&#10;&#10;    MaterialTheme(&#10;        colorScheme = colorScheme,&#10;        typography = Typography,&#10;        content = content&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/ui/theme/Type.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/ui/theme/Type.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.presentation.ui.theme&#10;&#10;import androidx.compose.material3.Typography&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.sp&#10;&#10;// Modern Typography System using default fonts&#10;val Typography = Typography(&#10;    // Large titles&#10;    displayLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Bold,&#10;        fontSize = 36.sp,&#10;        lineHeight = 44.sp,&#10;        letterSpacing = (-0.5).sp&#10;    ),&#10;    displayMedium = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Bold,&#10;        fontSize = 32.sp,&#10;        lineHeight = 40.sp,&#10;        letterSpacing = (-0.25).sp&#10;    ),&#10;    displaySmall = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.SemiBold,&#10;        fontSize = 28.sp,&#10;        lineHeight = 36.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;&#10;    // Headlines&#10;    headlineLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.SemiBold,&#10;        fontSize = 24.sp,&#10;        lineHeight = 32.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    headlineMedium = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.SemiBold,&#10;        fontSize = 22.sp,&#10;        lineHeight = 28.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    headlineSmall = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 20.sp,&#10;        lineHeight = 26.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;&#10;    // Titles&#10;    titleLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.SemiBold,&#10;        fontSize = 18.sp,&#10;        lineHeight = 24.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    titleMedium = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 16.sp,&#10;        lineHeight = 22.sp,&#10;        letterSpacing = 0.1.sp&#10;    ),&#10;    titleSmall = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 14.sp,&#10;        lineHeight = 20.sp,&#10;        letterSpacing = 0.1.sp&#10;    ),&#10;&#10;    // Body text&#10;    bodyLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 16.sp,&#10;        lineHeight = 24.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    bodyMedium = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 14.sp,&#10;        lineHeight = 20.sp,&#10;        letterSpacing = 0.25.sp&#10;    ),&#10;    bodySmall = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 12.sp,&#10;        lineHeight = 16.sp,&#10;        letterSpacing = 0.4.sp&#10;    ),&#10;&#10;    // Labels&#10;    labelLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 14.sp,&#10;        lineHeight = 20.sp,&#10;        letterSpacing = 0.1.sp&#10;    ),&#10;    labelMedium = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 12.sp,&#10;        lineHeight = 16.sp,&#10;        letterSpacing = 0.5.sp&#10;    ),&#10;    labelSmall = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 11.sp,&#10;        lineHeight = 14.sp,&#10;        letterSpacing = 0.5.sp&#10;    )&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/utils/HtmlUtils.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/utils/HtmlUtils.kt" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.presentation.utils&#10;&#10;import androidx.compose.foundation.text.ClickableText&#10;import androidx.compose.material3.LocalTextStyle&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.AnnotatedString&#10;import androidx.compose.ui.text.SpanStyle&#10;import androidx.compose.ui.text.buildAnnotatedString&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextDecoration&#10;import androidx.compose.ui.unit.sp&#10;&#10;@Composable&#10;fun HtmlText(&#10;    html: String,&#10;    color: Color = MaterialTheme.colorScheme.onSurface&#10;) {&#10;    val annotatedString = buildAnnotatedString {&#10;        val cleanText = html&#10;            .replace(&quot;&lt;p&gt;&quot;, &quot;&quot;)&#10;            .replace(&quot;&lt;/p&gt;&quot;, &quot;\n\n&quot;)&#10;            .replace(&quot;&lt;br&gt;&quot;, &quot;\n&quot;)&#10;            .replace(&quot;&lt;br/&gt;&quot;, &quot;\n&quot;)&#10;            .replace(&quot;&lt;br /&gt;&quot;, &quot;\n&quot;)&#10;            .replace(&quot;&lt;strong&gt;&quot;, &quot;&quot;)&#10;            .replace(&quot;&lt;/strong&gt;&quot;, &quot;&quot;)&#10;            .replace(&quot;&lt;b&gt;&quot;, &quot;&quot;)&#10;            .replace(&quot;&lt;/b&gt;&quot;, &quot;&quot;)&#10;            .replace(&quot;&lt;em&gt;&quot;, &quot;&quot;)&#10;            .replace(&quot;&lt;/em&gt;&quot;, &quot;&quot;)&#10;            .replace(&quot;&lt;i&gt;&quot;, &quot;&quot;)&#10;            .replace(&quot;&lt;/i&gt;&quot;, &quot;&quot;)&#10;            .replace(&quot;&lt;u&gt;&quot;, &quot;&quot;)&#10;            .replace(&quot;&lt;/u&gt;&quot;, &quot;&quot;)&#10;            .replace(&quot;&amp;amp;&quot;, &quot;&amp;&quot;)&#10;            .replace(&quot;&amp;lt;&quot;, &quot;&lt;&quot;)&#10;            .replace(&quot;&amp;gt;&quot;, &quot;&gt;&quot;)&#10;            .replace(&quot;&amp;quot;&quot;, &quot;\&quot;&quot;)&#10;            .replace(&quot;&amp;#39;&quot;, &quot;'&quot;)&#10;            .replace(&quot;&amp;nbsp;&quot;, &quot; &quot;)&#10;            .trim()&#10;        &#10;        append(cleanText)&#10;        &#10;        // Apply color to entire text&#10;        addStyle(&#10;            style = SpanStyle(color = color),&#10;            start = 0,&#10;            end = cleanText.length&#10;        )&#10;    }&#10;    &#10;    ClickableText(&#10;        text = annotatedString,&#10;        style = LocalTextStyle.current.copy(&#10;            lineHeight = 24.sp&#10;        ),&#10;        onClick = { }&#10;    )&#10;}&#10;&#10;fun String.removeHtmlTags(): String {&#10;    return this&#10;        .replace(&quot;&lt;p&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;/p&gt;&quot;, &quot;\n\n&quot;)&#10;        .replace(&quot;&lt;br&gt;&quot;, &quot;\n&quot;)&#10;        .replace(&quot;&lt;br/&gt;&quot;, &quot;\n&quot;)&#10;        .replace(&quot;&lt;br /&gt;&quot;, &quot;\n&quot;)&#10;        .replace(&quot;&lt;strong&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;/strong&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;b&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;/b&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;em&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;/em&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;i&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;/i&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;u&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;/u&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&amp;amp;&quot;, &quot;&amp;&quot;)&#10;        .replace(&quot;&amp;lt;&quot;, &quot;&lt;&quot;)&#10;        .replace(&quot;&amp;gt;&quot;, &quot;&gt;&quot;)&#10;        .replace(&quot;&amp;quot;&quot;, &quot;\&quot;&quot;)&#10;        .replace(&quot;&amp;#39;&quot;, &quot;'&quot;)&#10;        .replace(&quot;&amp;nbsp;&quot;, &quot; &quot;)&#10;        .replace(Regex(&quot;&lt;[^&gt;]*&gt;&quot;), &quot;&quot;) // Remove any remaining HTML tags&#10;        .trim()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/build.gradle.kts" />
              <option name="originalContent" value="// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;plugins {&#10;    alias(libs.plugins.android.application) apply false&#10;    alias(libs.plugins.jetbrains.kotlin.android) apply false&#10;    id(&quot;com.google.dagger.hilt.android&quot;) version &quot;2.51.1&quot; apply false&#10;&#10;&#10;}" />
              <option name="updatedContent" value="// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;plugins {&#10;    alias(libs.plugins.android.application) apply false&#10;    alias(libs.plugins.jetbrains.kotlin.android) apply false&#10;    id(&quot;com.google.dagger.hilt.android&quot;) version &quot;2.51.1&quot; apply false&#10;    id(&quot;com.google.devtools.ksp&quot;) version &quot;1.9.0-1.0.13&quot; apply false&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle.properties" />
              <option name="originalContent" value="# Project-wide Gradle settings.&#10;# IDE (e.g. Android Studio) users:&#10;# Gradle settings configured through the IDE *will override*&#10;# any settings specified in this file.&#10;# For more details on how to configure your build environment visit&#10;# http://www.gradle.org/docs/current/userguide/build_environment.html&#10;# Specifies the JVM arguments used for the daemon process.&#10;# The setting is particularly useful for tweaking memory settings.&#10;org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8&#10;# When configured, Gradle will run in incubating parallel mode.&#10;# This option should only be used with decoupled projects. For more details, visit&#10;# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects&#10;# org.gradle.parallel=true&#10;# AndroidX package structure to make it clearer which packages are bundled with the&#10;# Android operating system, and which are packaged with your app's APK&#10;# https://developer.android.com/topic/libraries/support-library/androidx-rn&#10;android.useAndroidX=true&#10;# Kotlin code style for this project: &quot;official&quot; or &quot;obsolete&quot;:&#10;kotlin.code.style=official&#10;# Enables namespacing of each library's R class so that its R class includes only the&#10;# resources declared in the library itself and none from the library's dependencies,&#10;# thereby reducing the size of the R class for that library&#10;android.nonTransitiveRClass=true&#10;&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="# Project-wide Gradle settings.&#10;# IDE (e.g. Android Studio) users:&#10;# Gradle settings configured through the IDE *will override*&#10;# any settings specified in this file.&#10;# For more details on how to configure your build environment visit&#10;# http://www.gradle.org/docs/current/userguide/build_environment.html&#10;# Specifies the JVM arguments used for the daemon process.&#10;# The setting is particularly useful for tweaking memory settings.&#10;org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8&#10;# When configured, Gradle will run in incubating parallel mode.&#10;# This option should only be used with decoupled projects. For more details, visit&#10;# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects&#10;# org.gradle.parallel=true&#10;# AndroidX package structure to make it clearer which packages are bundled with the&#10;# Android operating system, and which are packaged with your app's APK&#10;# https://developer.android.com/topic/libraries/support-library/androidx-rn&#10;android.useAndroidX=true&#10;# Kotlin code style for this project: &quot;official&quot; or &quot;obsolete&quot;:&#10;kotlin.code.style=official&#10;# Enables namespacing of each library's R class so that its R class includes only the&#10;# resources declared in the library itself and none from the library's dependencies,&#10;# thereby reducing the size of the R class for that library&#10;android.nonTransitiveRClass=true&#10;&#10;# Suppress warning about compileSdk 36&#10;android.suppressUnsupportedCompileSdk=36&#10;&#10;# Enable KSP incremental processing for better performance&#10;ksp.incremental=true&#10;ksp.incremental.intermodule=true" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/libs.versions.toml" />
              <option name="originalContent" value="[versions]&#10;accompanistFlowlayoutVersion = &quot;0.31.1-alpha&quot;&#10;agp = &quot;8.5.1&quot;&#10;androidxHiltNavigationCompose = &quot;1.0.0&quot;&#10;converterGson = &quot;2.11.0&quot;&#10;hiltAndroid = &quot;2.49&quot;&#10;hiltAndroidCompiler = &quot;2.44&quot;&#10;hiltAndroidCompilerVersion = &quot;2.51.1&quot;&#10;hiltAndroidVersion = &quot;2.51.1&quot;&#10;hiltNavigationComposeVersion = &quot;&lt;version&gt;&quot;&#10;kotlin = &quot;1.9.0&quot;&#10;coreKtx = &quot;1.13.1&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.2.1&quot;&#10;espressoCore = &quot;3.6.1&quot;&#10;kotlinxCoroutinesAndroid = &quot;1.7.3&quot;&#10;lifecycleRuntimeKtx = &quot;2.8.6&quot;&#10;activityCompose = &quot;1.9.2&quot;&#10;composeBom = &quot;2024.04.01&quot;&#10;retrofit = &quot;2.11.0&quot;&#10;navigationRuntimeKtx = &quot;2.8.3&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;androidx-hilt-navigation-compose = { module = &quot;androidx.hilt:hilt-navigation-compose&quot;, version.ref = &quot;hiltNavigationComposeVersion&quot; }&#10;androidx-hilt-navigation-compose-v100 = { module = &quot;androidx.hilt:hilt-navigation-compose&quot;, version.ref = &quot;androidxHiltNavigationCompose&quot; }&#10;converter-gson = { module = &quot;com.squareup.retrofit2:converter-gson&quot;, version.ref = &quot;converterGson&quot; }&#10;google-accompanist-flowlayout = { module = &quot;com.google.accompanist:accompanist-flowlayout&quot;, version.ref = &quot;accompanistFlowlayoutVersion&quot; }&#10;hilt-android = { module = &quot;com.google.dagger:hilt-android&quot;, version.ref = &quot;hiltAndroid&quot; }&#10;hilt-android-compiler = { module = &quot;com.google.dagger:hilt-android-compiler&quot;, version.ref = &quot;hiltAndroidCompiler&quot; }&#10;hilt-android-compiler-v2511 = { module = &quot;com.google.dagger:hilt-android-compiler&quot;, version.ref = &quot;hiltAndroidCompilerVersion&quot; }&#10;hilt-android-v2511 = { module = &quot;com.google.dagger:hilt-android&quot;, version.ref = &quot;hiltAndroidVersion&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;kotlinx-coroutines-android = { module = &quot;org.jetbrains.kotlinx:kotlinx-coroutines-android&quot;, version.ref = &quot;kotlinxCoroutinesAndroid&quot; }&#10;retrofit = { module = &quot;com.squareup.retrofit2:retrofit&quot;, version.ref = &quot;retrofit&quot; }&#10;androidx-navigation-runtime-ktx = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-runtime-ktx&quot;, version.ref = &quot;navigationRuntimeKtx&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;jetbrains-kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;&#10;" />
              <option name="updatedContent" value="[versions]&#10;accompanistFlowlayoutVersion = &quot;0.31.1-alpha&quot;&#10;agp = &quot;8.6.0&quot;&#10;androidxHiltNavigationCompose = &quot;1.0.0&quot;&#10;converterGson = &quot;2.11.0&quot;&#10;hiltAndroid = &quot;2.49&quot;&#10;hiltAndroidCompiler = &quot;2.44&quot;&#10;hiltAndroidCompilerVersion = &quot;2.51.1&quot;&#10;hiltAndroidVersion = &quot;2.51.1&quot;&#10;hiltNavigationComposeVersion = &quot;&lt;version&gt;&quot;&#10;kotlin = &quot;1.9.0&quot;&#10;coreKtx = &quot;1.13.1&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.2.1&quot;&#10;espressoCore = &quot;3.6.1&quot;&#10;kotlinxCoroutinesAndroid = &quot;1.7.3&quot;&#10;lifecycleRuntimeKtx = &quot;2.8.6&quot;&#10;activityCompose = &quot;1.9.2&quot;&#10;composeBom = &quot;2024.04.01&quot;&#10;retrofit = &quot;2.11.0&quot;&#10;navigationRuntimeKtx = &quot;2.8.3&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;androidx-hilt-navigation-compose = { module = &quot;androidx.hilt:hilt-navigation-compose&quot;, version.ref = &quot;hiltNavigationComposeVersion&quot; }&#10;androidx-hilt-navigation-compose-v100 = { module = &quot;androidx.hilt:hilt-navigation-compose&quot;, version.ref = &quot;androidxHiltNavigationCompose&quot; }&#10;converter-gson = { module = &quot;com.squareup.retrofit2:converter-gson&quot;, version.ref = &quot;converterGson&quot; }&#10;google-accompanist-flowlayout = { module = &quot;com.google.accompanist:accompanist-flowlayout&quot;, version.ref = &quot;accompanistFlowlayoutVersion&quot; }&#10;hilt-android = { module = &quot;com.google.dagger:hilt-android&quot;, version.ref = &quot;hiltAndroid&quot; }&#10;hilt-android-compiler = { module = &quot;com.google.dagger:hilt-android-compiler&quot;, version.ref = &quot;hiltAndroidCompiler&quot; }&#10;hilt-android-compiler-v2511 = { module = &quot;com.google.dagger:hilt-android-compiler&quot;, version.ref = &quot;hiltAndroidCompilerVersion&quot; }&#10;hilt-android-v2511 = { module = &quot;com.google.dagger:hilt-android&quot;, version.ref = &quot;hiltAndroidVersion&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;kotlinx-coroutines-android = { module = &quot;org.jetbrains.kotlinx:kotlinx-coroutines-android&quot;, version.ref = &quot;kotlinxCoroutinesAndroid&quot; }&#10;retrofit = { module = &quot;com.squareup.retrofit2:retrofit&quot;, version.ref = &quot;retrofit&quot; }&#10;androidx-navigation-runtime-ktx = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-runtime-ktx&quot;, version.ref = &quot;navigationRuntimeKtx&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;jetbrains-kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>