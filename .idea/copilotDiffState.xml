<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.jetbrains.kotlin.android)&#10;    id(&quot;com.google.devtools.ksp&quot;)&#10;    id(&quot;com.google.dagger.hilt.android&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.cryptocurrencyapp&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.cryptocurrencyapp&quot;&#10;        minSdk = 24&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        vectorDrawables {&#10;            useSupportLibrary = true&#10;        }&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_17&#10;        targetCompatibility = JavaVersion.VERSION_17&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;17&quot;&#10;        freeCompilerArgs += listOf(&#10;            &quot;-Xjvm-default=all&quot;&#10;        )&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = &quot;1.5.1&quot;&#10;    }&#10;    packaging {&#10;        resources {&#10;            excludes += &quot;/META-INF/{AL2.0,LGPL2.1}&quot;&#10;        }&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.converter.gson)&#10;    implementation (libs.retrofit)&#10;    //hilt&#10;    implementation(libs.hilt.android.v2511)&#10;    implementation(libs.androidx.navigation.runtime.ktx)&#10;    ksp(libs.hilt.android.compiler.v2511)&#10;    implementation (libs.androidx.hilt.navigation.compose.v100)&#10;    implementation (&quot;androidx.navigation:navigation-compose:2.8.6&quot;)&#10;    implementation (&quot;org.jsoup:jsoup:1.17.2&quot;)&#10;&#10;&#10;    implementation(libs.kotlinx.coroutines.android)&#10;&#10;    implementation(&quot;androidx.compose.material:material-icons-extended:1.7.5&quot;)&#10;    implementation(&quot;br.com.devsrsouza.compose.icons:feather:1.1.0&quot;)&#10;    implementation(&quot;br.com.devsrsouza.compose.icons:eva-icons:1.1.0&quot;)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.jetbrains.kotlin.android)&#10;    id(&quot;com.google.devtools.ksp&quot;)&#10;    id(&quot;com.google.dagger.hilt.android&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.cryptocurrencyapp&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.cryptocurrencyapp&quot;&#10;        minSdk = 24&#10;        targetSdk = 34&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        vectorDrawables {&#10;            useSupportLibrary = true&#10;        }&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_17&#10;        targetCompatibility = JavaVersion.VERSION_17&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;17&quot;&#10;        freeCompilerArgs += listOf(&#10;            &quot;-Xjvm-default=all&quot;&#10;        )&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = &quot;1.5.1&quot;&#10;    }&#10;    packaging {&#10;        resources {&#10;            excludes += &quot;/META-INF/{AL2.0,LGPL2.1}&quot;&#10;        }&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    //Retrofit &amp;&amp; GSON&#10;    implementation(libs.converter.gson)&#10;    implementation (libs.retrofit)&#10;    //hilt&#10;    implementation(libs.hilt.android.v2511)&#10;    implementation(libs.androidx.navigation.runtime.ktx)&#10;    ksp(libs.hilt.android.compiler.v2511)&#10;    implementation (libs.androidx.hilt.navigation.compose.v100)&#10;    &#10;    // Navigation - Updated to latest version&#10;    implementation (&quot;androidx.navigation:navigation-compose:2.9.3&quot;)&#10;    &#10;    // HTML to Text Processing - Updated to latest version&#10;    implementation (&quot;org.jsoup:jsoup:1.21.1&quot;)&#10;&#10;    implementation (libs.google.accompanist.flowlayout)&#10;    //coroutines&#10;    implementation(libs.kotlinx.coroutines.android)&#10;&#10;    // Modern Icon Libraries - Only stable ones&#10;    implementation(&quot;androidx.compose.material:material-icons-extended:1.7.8&quot;)&#10;    implementation(&quot;br.com.devsrsouza.compose.icons:feather:1.1.1&quot;)&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/common/NetworkManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/common/NetworkManager.kt" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.common&#10;&#10;import android.content.Context&#10;import android.net.ConnectivityManager&#10;import android.net.NetworkCapabilities&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.State&#10;import androidx.compose.runtime.produceState&#10;import androidx.compose.ui.platform.LocalContext&#10;import kotlinx.coroutines.delay&#10;&#10;class NetworkManager(private val context: Context) {&#10;    &#10;    fun isNetworkAvailable(): Boolean {&#10;        val connectivityManager = context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager&#10;        val network = connectivityManager.activeNetwork ?: return false&#10;        val activeNetwork = connectivityManager.getNetworkCapabilities(network) ?: return false&#10;        &#10;        return when {&#10;            activeNetwork.hasTransport(NetworkCapabilities.TRANSPORT_WIFI) -&gt; true&#10;            activeNetwork.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR) -&gt; true&#10;            activeNetwork.hasTransport(NetworkCapabilities.TRANSPORT_ETHERNET) -&gt; true&#10;            else -&gt; false&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun rememberNetworkState(): State&lt;Boolean&gt; {&#10;    val context = LocalContext.current&#10;    val networkManager = NetworkManager(context)&#10;    &#10;    return produceState(initialValue = false) {&#10;        while (true) {&#10;            value = networkManager.isNetworkAvailable()&#10;            delay(1000) // فحص كل ثانية&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/data/remote/dto/TeamMember.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/data/remote/dto/TeamMember.kt" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.data.remote.dto&#10;&#10;import com.google.gson.annotations.SerializedName&#10;&#10;data class TeamMember(&#10;    val id: String,&#10;    val name: String,&#10;    val position: String&#10;)&#10;&#10;fun TeamMember.toTeamMember(): com.example.cryptocurrencyapp.domain.model.TeamMember {&#10;    return com.example.cryptocurrencyapp.domain.model.TeamMember(&#10;        id = id,&#10;        name = name,&#10;        position = position&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/domain/model/TeamMember.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/domain/model/TeamMember.kt" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.domain.model&#10;&#10;data class TeamMember(&#10;    val id: String,&#10;    val name: String,&#10;    val position: String&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/MainActivity.kt" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.presentation&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.cryptocurrencyapp.presentation.coin_details.CoinDetailScreen&#10;import com.example.cryptocurrencyapp.presentation.coin_list.CoinListScreen&#10;import com.example.cryptocurrencyapp.presentation.ui.theme.CryptoCurrencyAppTheme&#10;import com.example.cryptocurrencyapp.presentation.ui.theme.ThemeManager&#10;import dagger.hilt.android.AndroidEntryPoint&#10;import javax.inject.Inject&#10;&#10;@AndroidEntryPoint&#10;class MainActivity : ComponentActivity() {&#10;    &#10;    @Inject&#10;    lateinit var themeManager: ThemeManager&#10;    &#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            CryptoCurrencyAppTheme(&#10;                themeManager = themeManager&#10;            ) {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    val navController = rememberNavController()&#10;                    NavHost(&#10;                        navController = navController,&#10;                        startDestination = Screen.CoinListScreen.route&#10;                    ) {&#10;                        composable(&#10;                            route = Screen.CoinListScreen.route&#10;                        ) {&#10;                            CoinListScreen(navController, themeManager)&#10;                        }&#10;                        composable(&#10;                            route = Screen.CoinDetailScreen.route + &quot;/{coinId}&quot;&#10;                        ) {&#10;                            CoinDetailScreen(navController, themeManager)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/Screen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/Screen.kt" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.presentation&#10;&#10;sealed class Screen(val route: String) {&#10;    object CoinListScreen : Screen(&quot;coin_list&quot;)&#10;    object CoinDetailScreen : Screen(&quot;coin_detail&quot;)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/coin_details/CoinDetailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/coin_details/CoinDetailScreen.kt" />
              <option name="originalContent" value="package com.example.cryptocurrencyapp.presentation.coin_details&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Star&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import com.example.cryptocurrencyapp.presentation.coin_details.components.CoinTag&#10;import com.example.cryptocurrencyapp.presentation.coin_details.components.TeamListItem&#10;import com.example.cryptocurrencyapp.presentation.components.HtmlText&#10;import com.example.cryptocurrencyapp.presentation.ui.theme.*&#10;import com.example.cryptocurrencyapp.presentation.utils.removeHtmlTags&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CoinDetailScreen(&#10;    navController: NavController,&#10;    viewModel: CoinDetailsViewModel = hiltViewModel()&#10;) {&#10;    val state = viewModel.state.value&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(BackgroundLight)&#10;    ) {&#10;        // Modern Flat Header with Back Button&#10;        TopAppBar(&#10;            title = {&#10;                Text(&#10;                    text = &quot;Coin Details&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.SemiBold&#10;                )&#10;            },&#10;            navigationIcon = {&#10;                IconButton(onClick = { navController.navigateUp() }) {&#10;                    Icon(&#10;                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                        contentDescription = &quot;Back&quot;&#10;                    )&#10;                }&#10;            },&#10;            colors = TopAppBarDefaults.topAppBarColors(&#10;                containerColor = SurfaceLight,&#10;                titleContentColor = TextPrimary&#10;            )&#10;        )&#10;&#10;        Box(modifier = Modifier.fillMaxSize()) {&#10;            state.coin?.let { coin -&gt;&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentPadding = PaddingValues(20.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    item {&#10;                        // Coin Header Card - Pure Flat Design&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .background(&#10;                                    color = SurfaceLight,&#10;                                    shape = RoundedCornerShape(20.dp)&#10;                                )&#10;                                .border(&#10;                                    width = 1.dp,&#10;                                    color = BorderLight,&#10;                                    shape = RoundedCornerShape(20.dp)&#10;                                )&#10;                        ) {&#10;                            // Accent Header Background&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .background(&#10;                                        color = Primary.copy(alpha = 0.05f),&#10;                                        shape = RoundedCornerShape(20.dp)&#10;                                    )&#10;                                    .padding(24.dp)&#10;                            ) {&#10;                                Column {&#10;                                    Row(&#10;                                        modifier = Modifier.fillMaxWidth(),&#10;                                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                                        verticalAlignment = Alignment.Top&#10;                                    ) {&#10;                                        Column(modifier = Modifier.weight(1f)) {&#10;                                            Text(&#10;                                                text = &quot;${coin.rank}. ${coin.name}&quot;,&#10;                                                style = MaterialTheme.typography.headlineSmall,&#10;                                                fontWeight = FontWeight.Bold,&#10;                                                color = TextPrimary&#10;                                            )&#10;&#10;                                            Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                                            Text(&#10;                                                text = coin.symbol.uppercase(),&#10;                                                style = MaterialTheme.typography.titleMedium,&#10;                                                fontWeight = FontWeight.Medium,&#10;                                                color = Primary&#10;                                            )&#10;&#10;                                            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                                            // Status Badge - Pure Flat&#10;                                            Box(&#10;                                                modifier = Modifier&#10;                                                    .background(&#10;                                                        color = if (coin.isActive) Success.copy(alpha = 0.15f) else Error.copy(alpha = 0.15f),&#10;                                                        shape = RoundedCornerShape(12.dp)&#10;                                                    )&#10;                                                    .border(&#10;                                                        width = 1.dp,&#10;                                                        color = if (coin.isActive) Success.copy(alpha = 0.3f) else Error.copy(alpha = 0.3f),&#10;                                                        shape = RoundedCornerShape(12.dp)&#10;                                                    )&#10;                                            ) {&#10;                                                Row(&#10;                                                    modifier = Modifier.padding(horizontal = 12.dp, vertical = 8.dp),&#10;                                                    verticalAlignment = Alignment.CenterVertically&#10;                                                ) {&#10;                                                    Text(&#10;                                                        text = if (coin.isActive) &quot;✅&quot; else &quot;❌&quot;,&#10;                                                        fontSize = 16.sp&#10;                                                    )&#10;                                                    Spacer(modifier = Modifier.width(6.dp))&#10;                                                    Text(&#10;                                                        text = if (coin.isActive) &quot;Active&quot; else &quot;Inactive&quot;,&#10;                                                        style = MaterialTheme.typography.labelLarge,&#10;                                                        color = if (coin.isActive) Success else Error,&#10;                                                        fontWeight = FontWeight.SemiBold&#10;                                                    )&#10;                                                }&#10;                                            }&#10;                                        }&#10;&#10;                                        IconButton(&#10;                                            onClick = { /* Add to favorites */ }&#10;                                        ) {&#10;                                            Icon(&#10;                                                imageVector = Icons.Default.Star,&#10;                                                contentDescription = &quot;Add to favorites&quot;,&#10;                                                tint = Warning,&#10;                                                modifier = Modifier.size(28.dp)&#10;                                            )&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    item {&#10;                        // Description Card - Flat Design with HTML Support&#10;                        if (coin.description.isNotEmpty()) {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .background(&#10;                                        color = SurfaceLight,&#10;                                        shape = RoundedCornerShape(16.dp)&#10;                                    )&#10;                                    .border(&#10;                                        width = 1.dp,&#10;                                        color = BorderLight,&#10;                                        shape = RoundedCornerShape(16.dp)&#10;                                    )&#10;                            ) {&#10;                                Column(&#10;                                    modifier = Modifier.padding(20.dp)&#10;                                ) {&#10;                                    Row(&#10;                                        verticalAlignment = Alignment.CenterVertically&#10;                                    ) {&#10;                                        Text(&#10;                                            text = &quot;&quot;,&#10;                                            fontSize = 20.sp&#10;                                        )&#10;                                        Spacer(modifier = Modifier.width(8.dp))&#10;                                        Text(&#10;                                            text = &quot;Description&quot;,&#10;                                            style = MaterialTheme.typography.titleMedium,&#10;                                            fontWeight = FontWeight.SemiBold,&#10;                                            color = TextPrimary&#10;                                        )&#10;                                    }&#10;&#10;                                    Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                                    // استخدام مكتبة Rich Text لمعالجة HTML&#10;                                    HtmlText(&#10;                                        htmlContent = coin.description,&#10;                                        textColor = TextSecondary&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    item {&#10;                        // Tags Section - Pure Flat&#10;                        if (coin.tags.isNotEmpty()) {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .background(&#10;                                        color = SurfaceLight,&#10;                                        shape = RoundedCornerShape(16.dp)&#10;                                    )&#10;                                    .border(&#10;                                        width = 1.dp,&#10;                                        color = BorderLight,&#10;                                        shape = RoundedCornerShape(16.dp)&#10;                                    )&#10;                            ) {&#10;                                Column(&#10;                                    modifier = Modifier.padding(20.dp)&#10;                                ) {&#10;                                    Row(&#10;                                        verticalAlignment = Alignment.CenterVertically&#10;                                    ) {&#10;                                        Text(&#10;                                            text = &quot;️&quot;,&#10;                                            fontSize = 20.sp&#10;                                        )&#10;                                        Spacer(modifier = Modifier.width(8.dp))&#10;                                        Text(&#10;                                            text = &quot;Tags&quot;,&#10;                                            style = MaterialTheme.typography.titleMedium,&#10;                                            fontWeight = FontWeight.SemiBold,&#10;                                            color = TextPrimary&#10;                                        )&#10;                                    }&#10;&#10;                                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                                    // Tags Grid&#10;                                    coin.tags.chunked(3).forEach { rowTags -&gt;&#10;                                        Row(&#10;                                            modifier = Modifier.fillMaxWidth(),&#10;                                            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                                        ) {&#10;                                            rowTags.forEach { tag -&gt;&#10;                                                CoinTag(tag = tag)&#10;                                            }&#10;                                        }&#10;                                        Spacer(modifier = Modifier.height(8.dp))&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    item {&#10;                        // Team Section - Flat Design&#10;                        if (coin.team.isNotEmpty()) {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .background(&#10;                                        color = SurfaceLight,&#10;                                        shape = RoundedCornerShape(16.dp)&#10;                                    )&#10;                                    .border(&#10;                                        width = 1.dp,&#10;                                        color = BorderLight,&#10;                                        shape = RoundedCornerShape(16.dp)&#10;                                    )&#10;                            ) {&#10;                                Column(&#10;                                    modifier = Modifier.padding(20.dp)&#10;                                ) {&#10;                                    Row(&#10;                                        verticalAlignment = Alignment.CenterVertically&#10;                                    ) {&#10;                                        Text(&#10;                                            text = &quot;&quot;,&#10;                                            fontSize = 20.sp&#10;                                        )&#10;                                        Spacer(modifier = Modifier.width(8.dp))&#10;                                        Text(&#10;                                            text = &quot;Team Members&quot;,&#10;                                            style = MaterialTheme.typography.titleMedium,&#10;                                            fontWeight = FontWeight.SemiBold,&#10;                                            color = TextPrimary&#10;                                        )&#10;                                    }&#10;&#10;                                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                                    coin.team.forEach { teamMember -&gt;&#10;                                        TeamListItem(&#10;                                            teamMember = com.example.cryptocurrencyapp.domain.model.TeamMember(&#10;                                                id = teamMember.id,&#10;                                                name = teamMember.name,&#10;                                                position = teamMember.position&#10;                                            ),&#10;                                            modifier = Modifier&#10;                                                .fillMaxWidth()&#10;                                                .padding(vertical = 4.dp)&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            if (state.error.isNotBlank()) {&#10;                // Error State - Pure Flat&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(20.dp)&#10;                        .align(Alignment.Center)&#10;                        .background(&#10;                            color = Error.copy(alpha = 0.1f),&#10;                            shape = RoundedCornerShape(16.dp)&#10;                        )&#10;                        .border(&#10;                            width = 1.dp,&#10;                            color = Error.copy(alpha = 0.3f),&#10;                            shape = RoundedCornerShape(16.dp)&#10;                        )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(24.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;❌&quot;,&#10;                            fontSize = 48.sp&#10;                        )&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;                        Text(&#10;                            text = &quot;Error occurred&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = Error,&#10;                            fontWeight = FontWeight.SemiBold&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;                        Text(&#10;                            text = state.error,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = TextSecondary,&#10;                            textAlign = TextAlign.Center&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            if (state.isLoading) {&#10;                // Loading State - Flat&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        CircularProgressIndicator(&#10;                            color = Primary,&#10;                            strokeWidth = 3.dp,&#10;                            modifier = Modifier.size(48.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(&#10;                            text = &quot;Loading coin details...&quot;,&#10;                            style = MaterialTheme.typography.bodyLarge,&#10;                            color = TextSecondary&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.presentation.coin_details&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import com.example.cryptocurrencyapp.presentation.coin_details.components.CoinTag&#10;import com.example.cryptocurrencyapp.presentation.coin_details.components.TeamListItem&#10;import com.example.cryptocurrencyapp.presentation.components.ThemeToggleButton&#10;import com.example.cryptocurrencyapp.presentation.ui.theme.*&#10;import com.example.cryptocurrencyapp.presentation.utils.HtmlText&#10;import com.example.cryptocurrencyapp.domain.model.TeamMember&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CoinDetailScreen(&#10;    navController: NavController,&#10;    themeManager: ThemeManager,&#10;    viewModel: CoinDetailsViewModel = hiltViewModel()&#10;) {&#10;    val state = viewModel.state.value&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(MaterialTheme.colorScheme.background)&#10;    ) {&#10;        // Modern Flat Header with Back Button and Theme Toggle&#10;        Surface(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            color = MaterialTheme.colorScheme.primary,&#10;            shadowElevation = 0.dp // Flat design - no elevation&#10;        ) {&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(&#10;                        top = 48.dp,&#10;                        bottom = 16.dp,&#10;                        start = 16.dp,&#10;                        end = 16.dp&#10;                    ),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    IconButton(&#10;                        onClick = { navController.navigateUp() },&#10;                        colors = IconButtonDefaults.iconButtonColors(&#10;                            contentColor = MaterialTheme.colorScheme.onPrimary&#10;                        )&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;&#10;                    Text(&#10;                        text = &quot;Coin Details&quot;,&#10;                        style = MaterialTheme.typography.titleLarge,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = MaterialTheme.colorScheme.onPrimary,&#10;                        modifier = Modifier.padding(start = 8.dp)&#10;                    )&#10;                }&#10;&#10;                ThemeToggleButton(themeManager = themeManager)&#10;            }&#10;        }&#10;&#10;        // Content&#10;        Box(modifier = Modifier.fillMaxSize()) {&#10;            state.coin?.let { coin -&gt;&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentPadding = PaddingValues(20.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    // Coin Header Card - Pure Flat Design&#10;                    item {&#10;                        Card(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = MaterialTheme.colorScheme.surface&#10;                            ),&#10;                            elevation = CardDefaults.cardElevation(0.dp), // Flat design&#10;                            shape = RoundedCornerShape(16.dp)&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier.padding(24.dp)&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier.fillMaxWidth(),&#10;                                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                                    verticalAlignment = Alignment.Top&#10;                                ) {&#10;                                    Column(modifier = Modifier.weight(1f)) {&#10;                                        Text(&#10;                                            text = &quot;${coin.name} (${coin.symbol})&quot;,&#10;                                            style = MaterialTheme.typography.headlineSmall,&#10;                                            fontWeight = FontWeight.Bold,&#10;                                            color = MaterialTheme.colorScheme.onSurface&#10;                                        )&#10;&#10;                                        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                                        Text(&#10;                                            text = &quot;Rank #${coin.rank}&quot;,&#10;                                            style = MaterialTheme.typography.bodyLarge,&#10;                                            color = MaterialTheme.colorScheme.primary,&#10;                                            fontWeight = FontWeight.Medium&#10;                                        )&#10;                                    }&#10;&#10;                                    // Status Badge - Flat Design&#10;                                    Surface(&#10;                                        color = if (coin.isActive) Success.copy(alpha = 0.1f) else Error.copy(alpha = 0.1f),&#10;                                        shape = RoundedCornerShape(8.dp),&#10;                                        modifier = Modifier.border(&#10;                                            1.dp,&#10;                                            if (coin.isActive) Success.copy(alpha = 0.3f) else Error.copy(alpha = 0.3f),&#10;                                            RoundedCornerShape(8.dp)&#10;                                        )&#10;                                    ) {&#10;                                        Text(&#10;                                            text = if (coin.isActive) &quot;Active&quot; else &quot;Inactive&quot;,&#10;                                            modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp),&#10;                                            style = MaterialTheme.typography.bodySmall,&#10;                                            fontWeight = FontWeight.Medium,&#10;                                            color = if (coin.isActive) Success else Error&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Description Card - Fixed HTML Tags Issue&#10;                    item {&#10;                        Card(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = MaterialTheme.colorScheme.surface&#10;                            ),&#10;                            elevation = CardDefaults.cardElevation(0.dp),&#10;                            shape = RoundedCornerShape(16.dp)&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier.padding(24.dp)&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;Description&quot;,&#10;                                    style = MaterialTheme.typography.titleMedium,&#10;                                    fontWeight = FontWeight.SemiBold,&#10;                                    color = MaterialTheme.colorScheme.onSurface&#10;                                )&#10;&#10;                                Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                                // Using HtmlText component to handle HTML tags properly&#10;                                HtmlText(&#10;                                    html = coin.description,&#10;                                    modifier = Modifier.fillMaxWidth(),&#10;                                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Tags Section - Modern Flat Design&#10;                    if (coin.tags.isNotEmpty()) {&#10;                        item {&#10;                            Card(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                colors = CardDefaults.cardColors(&#10;                                    containerColor = MaterialTheme.colorScheme.surface&#10;                                ),&#10;                                elevation = CardDefaults.cardElevation(0.dp),&#10;                                shape = RoundedCornerShape(16.dp)&#10;                            ) {&#10;                                Column(&#10;                                    modifier = Modifier.padding(24.dp)&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;Tags&quot;,&#10;                                        style = MaterialTheme.typography.titleMedium,&#10;                                        fontWeight = FontWeight.SemiBold,&#10;                                        color = MaterialTheme.colorScheme.onSurface&#10;                                    )&#10;&#10;                                    Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                                    // Flat Tags Design&#10;                                    Row(&#10;                                        modifier = Modifier.fillMaxWidth(),&#10;                                        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                                    ) {&#10;                                        coin.tags.take(3).forEach { tag -&gt;&#10;                                            CoinTag(tag = tag)&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Team Section - Modern Cards&#10;                    if (coin.team.isNotEmpty()) {&#10;                        item {&#10;                            Card(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                colors = CardDefaults.cardColors(&#10;                                    containerColor = MaterialTheme.colorScheme.surface&#10;                                ),&#10;                                elevation = CardDefaults.cardElevation(0.dp),&#10;                                shape = RoundedCornerShape(16.dp)&#10;                            ) {&#10;                                Column(&#10;                                    modifier = Modifier.padding(24.dp)&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;Team Members&quot;,&#10;                                        style = MaterialTheme.typography.titleMedium,&#10;                                        fontWeight = FontWeight.SemiBold,&#10;                                        color = MaterialTheme.colorScheme.onSurface&#10;                                    )&#10;&#10;                                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                                    Column(&#10;                                        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                                    ) {&#10;                                        coin.team.forEach { teamMemberDto -&gt;&#10;                                            TeamListItem(&#10;                                                teamMember = TeamMember(&#10;                                                    id = teamMemberDto.id,&#10;                                                    name = teamMemberDto.name,&#10;                                                    position = teamMemberDto.position&#10;                                                ),&#10;                                                modifier = Modifier.fillMaxWidth()&#10;                                            )&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            if (state.error.isNotBlank()) {&#10;                // Error State - Flat Design&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(20.dp)&#10;                        .background(&#10;                            color = Error.copy(alpha = 0.1f),&#10;                            shape = RoundedCornerShape(16.dp)&#10;                        )&#10;                        .border(&#10;                            width = 1.dp,&#10;                            color = Error.copy(alpha = 0.3f),&#10;                            shape = RoundedCornerShape(16.dp)&#10;                        )&#10;                        .align(Alignment.Center)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(24.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;⚠️&quot;,&#10;                            fontSize = 48.sp&#10;                        )&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;                        Text(&#10;                            text = &quot;Error Loading Details&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = Error,&#10;                            fontWeight = FontWeight.SemiBold&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;                        Text(&#10;                            text = state.error,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = TextSecondary,&#10;                            textAlign = TextAlign.Center&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            if (state.isLoading) {&#10;                // Loading State - Flat Design&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    verticalArrangement = Arrangement.Center&#10;                ) {&#10;                    CircularProgressIndicator(&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        strokeWidth = 3.dp,&#10;                        modifier = Modifier.size(48.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    Text(&#10;                        text = &quot;Loading coin details...&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/coin_details/components/CoinTag.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/coin_details/components/CoinTag.kt" />
              <option name="originalContent" value="package com.example.cryptocurrencyapp.presentation.coin_details.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.example.cryptocurrencyapp.presentation.ui.theme.*&#10;import kotlin.random.Random&#10;&#10;@Composable&#10;fun CoinTag(&#10;    tag: String&#10;) {&#10;    val colors = listOf(&#10;        Primary.copy(alpha = 0.1f) to Primary,&#10;        Secondary.copy(alpha = 0.1f) to Secondary,&#10;        Accent1.copy(alpha = 0.1f) to Accent1,&#10;        Accent2.copy(alpha = 0.1f) to Accent2,&#10;        Accent3.copy(alpha = 0.1f) to Accent3,&#10;        Warning.copy(alpha = 0.1f) to Warning,&#10;        Info.copy(alpha = 0.1f) to Info&#10;    )&#10;&#10;    val randomColor = colors.random()&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .clip(RoundedCornerShape(12.dp))&#10;            .background(randomColor.first)&#10;            .border(&#10;                width = 1.dp,&#10;                color = randomColor.second.copy(alpha = 0.3f),&#10;                shape = RoundedCornerShape(12.dp)&#10;            )&#10;            .padding(horizontal = 12.dp, vertical = 8.dp)&#10;    ) {&#10;        Text(&#10;            text = tag,&#10;            style = MaterialTheme.typography.labelMedium,&#10;            color = randomColor.second,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.presentation.coin_details.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.example.cryptocurrencyapp.presentation.ui.theme.*&#10;import kotlin.random.Random&#10;&#10;@Composable&#10;fun CoinTag(&#10;    tag: String&#10;) {&#10;    // Modern Flat Color Combinations for Tags&#10;    val colorCombinations = listOf(&#10;        Primary to Primary.copy(alpha = 0.12f),&#10;        Secondary to Secondary.copy(alpha = 0.12f),&#10;        Accent1 to Accent1.copy(alpha = 0.12f),&#10;        Accent2 to Accent2.copy(alpha = 0.12f),&#10;        Accent3 to Accent3.copy(alpha = 0.12f),&#10;        Accent4 to Accent4.copy(alpha = 0.12f),&#10;        Accent5 to Accent5.copy(alpha = 0.12f),&#10;        Info to Info.copy(alpha = 0.12f)&#10;    )&#10;    &#10;    // Select color based on tag content for consistency&#10;    val colorIndex = tag.hashCode().rem(colorCombinations.size).let { &#10;        if (it &lt; 0) it + colorCombinations.size else it &#10;    }&#10;    val (textColor, backgroundColor) = colorCombinations[colorIndex]&#10;    &#10;    // Pure Flat Tag Design - No Shadows or Gradients&#10;    Box(&#10;        modifier = Modifier&#10;            .background(&#10;                color = backgroundColor,&#10;                shape = RoundedCornerShape(8.dp)&#10;            )&#10;            .border(&#10;                width = 1.dp,&#10;                color = textColor.copy(alpha = 0.3f),&#10;                shape = RoundedCornerShape(8.dp)&#10;            )&#10;            .padding(horizontal = 12.dp, vertical = 6.dp)&#10;    ) {&#10;        Text(&#10;            text = tag,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            fontWeight = FontWeight.Medium,&#10;            color = textColor&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/coin_details/components/TeamListItem.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/coin_details/components/TeamListItem.kt" />
              <option name="originalContent" value="package com.example.cryptocurrencyapp.presentation.coin_details.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import com.example.cryptocurrencyapp.domain.model.TeamMember&#10;import com.example.cryptocurrencyapp.presentation.ui.theme.*&#10;&#10;@Composable&#10;fun TeamListItem(&#10;    teamMember: TeamMember,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Surface(&#10;        modifier = modifier,&#10;        shape = RoundedCornerShape(12.dp),&#10;        color = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.5f)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Avatar&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(40.dp)&#10;                    .clip(CircleShape)&#10;                    .background(&#10;                        brush = androidx.compose.ui.graphics.Brush.linearGradient(&#10;                            colors = listOf(&#10;                                Primary.copy(alpha = 0.3f),&#10;                                Secondary.copy(alpha = 0.3f)&#10;                            )&#10;                        )&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(&#10;                    text = teamMember.name.take(2).uppercase(),&#10;                    style = MaterialTheme.typography.labelMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = Primary&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = teamMember.name,&#10;                    style = MaterialTheme.typography.titleSmall,&#10;                    fontWeight = FontWeight.SemiBold,&#10;                    color = MaterialTheme.colorScheme.onSurface,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;&#10;                Text(&#10;                    text = teamMember.position,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = TextSecondary,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.presentation.coin_details.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import com.example.cryptocurrencyapp.domain.model.TeamMember&#10;import com.example.cryptocurrencyapp.presentation.ui.theme.*&#10;&#10;@Composable&#10;fun TeamListItem(&#10;    teamMember: TeamMember,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    // Pure Flat Design Card for Team Members&#10;    Surface(&#10;        modifier = modifier,&#10;        color = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.5f),&#10;        shape = RoundedCornerShape(12.dp),&#10;        shadowElevation = 0.dp // Flat design - no elevation&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Avatar - Modern Flat Circle&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(40.dp)&#10;                    .background(&#10;                        color = MaterialTheme.colorScheme.primary.copy(alpha = 0.1f),&#10;                        shape = CircleShape&#10;                    )&#10;                    .border(&#10;                        width = 2.dp,&#10;                        color = MaterialTheme.colorScheme.primary.copy(alpha = 0.3f),&#10;                        shape = CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(&#10;                    text = teamMember.name.take(2).uppercase(),&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            // Team Member Info&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = teamMember.name,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    fontWeight = FontWeight.SemiBold,&#10;                    color = MaterialTheme.colorScheme.onSurface,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(2.dp))&#10;&#10;                Text(&#10;                    text = teamMember.position,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/coin_list/CoinListScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/coin_list/CoinListScreen.kt" />
              <option name="originalContent" value="package com.example.cryptocurrencyapp.presentation.coin_list&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material.icons.filled.Star&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import com.example.cryptocurrencyapp.presentation.Screen&#10;import com.example.cryptocurrencyapp.presentation.coin_list.components.CoinListItem&#10;import com.example.cryptocurrencyapp.presentation.components.NoInternetScreen&#10;import com.example.cryptocurrencyapp.presentation.ui.theme.*&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CoinListScreen(&#10;    navController: NavController,&#10;    viewModel: CoinListViewModel = hiltViewModel()&#10;) {&#10;    val state = viewModel.state.value&#10;    val isNetworkError = viewModel.isNetworkError.value&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(BackgroundLight)&#10;    ) {&#10;        // Modern Flat Header - No Gradient&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .background(Primary) // Pure flat color&#10;                .padding(top = 48.dp, bottom = 24.dp, start = 20.dp, end = 20.dp)&#10;        ) {&#10;            Column {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Column {&#10;                        Text(&#10;                            text = &quot;CryptoTracker&quot;,&#10;                            style = MaterialTheme.typography.headlineLarge,&#10;                            color = TextOnPrimary,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Text(&#10;                            text = &quot;Track your favorite cryptocurrencies&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = TextOnPrimary.copy(alpha = 0.9f)&#10;                        )&#10;                    }&#10;&#10;                    // Modern Flat Icon Container&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(48.dp)&#10;                            .background(&#10;                                color = TextOnPrimary.copy(alpha = 0.15f),&#10;                                shape = RoundedCornerShape(12.dp)&#10;                            ),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Star,&#10;                            contentDescription = &quot;Trending&quot;,&#10;                            tint = TextOnPrimary,&#10;                            modifier = Modifier.size(24.dp)&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(20.dp))&#10;&#10;                // Modern Flat Search Bar&#10;                OutlinedTextField(&#10;                    value = searchQuery,&#10;                    onValueChange = { searchQuery = it },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth(),&#10;                    placeholder = {&#10;                        Text(&#10;                            &quot;Search cryptocurrencies...&quot;,&#10;                            color = TextSecondary.copy(alpha = 0.7f)&#10;                        )&#10;                    },&#10;                    leadingIcon = {&#10;                        Icon(&#10;                            Icons.Default.Search,&#10;                            contentDescription = &quot;Search&quot;,&#10;                            tint = TextSecondary.copy(alpha = 0.7f)&#10;                        )&#10;                    },&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedContainerColor = SurfaceLight,&#10;                        unfocusedContainerColor = SurfaceLight,&#10;                        focusedBorderColor = BorderLight,&#10;                        unfocusedBorderColor = BorderLight,&#10;                        focusedTextColor = TextPrimary,&#10;                        unfocusedTextColor = TextPrimary&#10;                    ),&#10;                    shape = RoundedCornerShape(16.dp),&#10;                    singleLine = true&#10;                )&#10;            }&#10;        }&#10;&#10;        // Content Area&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(horizontal = 16.dp)&#10;        ) {&#10;            // فحص حالة عدم وجود إنترنت أولاً&#10;            if (isNetworkError) {&#10;                NoInternetScreen(&#10;                    onRetry = { viewModel.retryConnection() }&#10;                )&#10;            } else if (state.error.isNotBlank() &amp;&amp; !isNetworkError) {&#10;                // Error State - Pure Flat Design&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(20.dp)&#10;                        .background(&#10;                            color = Error.copy(alpha = 0.1f),&#10;                            shape = RoundedCornerShape(16.dp)&#10;                        )&#10;                        .border(&#10;                            width = 1.dp,&#10;                            color = Error.copy(alpha = 0.3f),&#10;                            shape = RoundedCornerShape(16.dp)&#10;                        )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(24.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;⚠️&quot;,&#10;                            fontSize = 48.sp&#10;                        )&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;                        Text(&#10;                            text = &quot;Something went wrong&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = Error,&#10;                            fontWeight = FontWeight.SemiBold&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;                        Text(&#10;                            text = state.error,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = TextSecondary,&#10;                            textAlign = TextAlign.Center&#10;                        )&#10;                    }&#10;                }&#10;            } else if (state.isLoading) {&#10;                // Modern Flat Loading State&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    verticalArrangement = Arrangement.Center&#10;                ) {&#10;                    CircularProgressIndicator(&#10;                        color = Primary,&#10;                        strokeWidth = 3.dp,&#10;                        modifier = Modifier.size(48.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    Text(&#10;                        text = &quot;Loading cryptocurrencies...&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        color = TextSecondary&#10;                    )&#10;                }&#10;            } else {&#10;                // Coins List - Normal content&#10;                val filteredCoins = if (searchQuery.isBlank()) {&#10;                    state.coins&#10;                } else {&#10;                    state.coins.filter {&#10;                        it.name.contains(searchQuery, ignoreCase = true) ||&#10;                        it.symbol.contains(searchQuery, ignoreCase = true)&#10;                    }&#10;                }&#10;&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentPadding = PaddingValues(vertical = 12.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    items(filteredCoins) { coin -&gt;&#10;                        CoinListItem(&#10;                            coin = coin,&#10;                            onItemClick = {&#10;                                navController.navigate(Screen.CoinDetailScreen.route + &quot;/${coin.id}&quot;)&#10;                            }&#10;                        )&#10;                    }&#10;&#10;                    if (filteredCoins.isEmpty() &amp;&amp; searchQuery.isNotBlank() &amp;&amp; !state.isLoading) {&#10;                        item {&#10;                            // No Results - Flat Design&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(20.dp)&#10;                                    .background(&#10;                                        color = CardBackgroundGray,&#10;                                        shape = RoundedCornerShape(16.dp)&#10;                                    )&#10;                                    .border(&#10;                                        width = 1.dp,&#10;                                        color = BorderLight,&#10;                                        shape = RoundedCornerShape(16.dp)&#10;                                    )&#10;                            ) {&#10;                                Column(&#10;                                    modifier = Modifier.padding(32.dp),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;&quot;,&#10;                                        fontSize = 48.sp&#10;                                    )&#10;                                    Spacer(modifier = Modifier.height(12.dp))&#10;                                    Text(&#10;                                        text = &quot;No results found&quot;,&#10;                                        style = MaterialTheme.typography.titleMedium,&#10;                                        fontWeight = FontWeight.SemiBold,&#10;                                        color = TextPrimary&#10;                                    )&#10;                                    Spacer(modifier = Modifier.height(4.dp))&#10;                                    Text(&#10;                                        text = &quot;Try searching for a different cryptocurrency&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        color = TextSecondary,&#10;                                        textAlign = TextAlign.Center&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.presentation.coin_list&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import com.example.cryptocurrencyapp.presentation.Screen&#10;import com.example.cryptocurrencyapp.presentation.coin_list.components.CoinListItem&#10;import com.example.cryptocurrencyapp.presentation.components.NoInternetScreen&#10;import com.example.cryptocurrencyapp.presentation.components.ThemeToggleButton&#10;import com.example.cryptocurrencyapp.presentation.ui.theme.*&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CoinListScreen(&#10;    navController: NavController,&#10;    themeManager: ThemeManager,&#10;    viewModel: CoinListViewModel = hiltViewModel()&#10;) {&#10;    val state = viewModel.state.value&#10;    val isNetworkError = viewModel.isNetworkError.value&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(MaterialTheme.colorScheme.background)&#10;    ) {&#10;        // Modern Flat Header with Theme Toggle&#10;        Surface(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            color = MaterialTheme.colorScheme.primary,&#10;            shadowElevation = 0.dp // Flat design - no elevation&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(&#10;                    top = 48.dp,&#10;                    bottom = 24.dp,&#10;                    start = 20.dp,&#10;                    end = 20.dp&#10;                )&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Column {&#10;                        Text(&#10;                            text = &quot;Crypto Currency&quot;,&#10;                            color = MaterialTheme.colorScheme.onPrimary,&#10;                            fontSize = 28.sp,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Text(&#10;                            text = &quot;Live Market Prices&quot;,&#10;                            color = MaterialTheme.colorScheme.onPrimary.copy(alpha = 0.8f),&#10;                            fontSize = 16.sp,&#10;                            fontWeight = FontWeight.Normal&#10;                        )&#10;                    }&#10;&#10;                    ThemeToggleButton(&#10;                        themeManager = themeManager,&#10;                        modifier = Modifier&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(20.dp))&#10;&#10;                // Search Bar - Flat Design&#10;                OutlinedTextField(&#10;                    value = searchQuery,&#10;                    onValueChange = { searchQuery = it },&#10;                    placeholder = {&#10;                        Text(&#10;                            &quot;Search cryptocurrencies...&quot;,&#10;                            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;                        )&#10;                    },&#10;                    leadingIcon = {&#10;                        Icon(&#10;                            Icons.Default.Search,&#10;                            contentDescription = &quot;Search&quot;,&#10;                            tint = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;                        )&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedContainerColor = MaterialTheme.colorScheme.surface,&#10;                        unfocusedContainerColor = MaterialTheme.colorScheme.surface,&#10;                        focusedBorderColor = MaterialTheme.colorScheme.secondary,&#10;                        unfocusedBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.3f)&#10;                    )&#10;                )&#10;            }&#10;        }&#10;&#10;        // Content Area&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(horizontal = 16.dp)&#10;        ) {&#10;            // فحص حالة عدم وجود إنترنت أولاً&#10;            if (isNetworkError) {&#10;                NoInternetScreen(&#10;                    onRetry = { viewModel.retryConnection() }&#10;                )&#10;            } else if (state.error.isNotBlank()) {&#10;                // Error State - Pure Flat Design&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(20.dp)&#10;                        .background(&#10;                            color = Error.copy(alpha = 0.1f),&#10;                            shape = RoundedCornerShape(16.dp)&#10;                        )&#10;                        .border(&#10;                            width = 1.dp,&#10;                            color = Error.copy(alpha = 0.3f),&#10;                            shape = RoundedCornerShape(16.dp)&#10;                        )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(24.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;⚠️&quot;,&#10;                            fontSize = 48.sp&#10;                        )&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;                        Text(&#10;                            text = &quot;Something went wrong&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = Error,&#10;                            fontWeight = FontWeight.SemiBold&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;                        Text(&#10;                            text = state.error,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = TextSecondary,&#10;                            textAlign = TextAlign.Center&#10;                        )&#10;                    }&#10;                }&#10;            } else if (state.isLoading) {&#10;                // Modern Flat Loading State&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    verticalArrangement = Arrangement.Center&#10;                ) {&#10;                    CircularProgressIndicator(&#10;                        color = Primary,&#10;                        strokeWidth = 3.dp,&#10;                        modifier = Modifier.size(48.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    Text(&#10;                        text = &quot;Loading cryptocurrencies...&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        color = TextSecondary&#10;                    )&#10;                }&#10;            } else {&#10;                // Coins List - Normal content&#10;                val filteredCoins = if (searchQuery.isBlank()) {&#10;                    state.coins&#10;                } else {&#10;                    state.coins.filter {&#10;                        it.name.contains(searchQuery, ignoreCase = true) ||&#10;                        it.symbol.contains(searchQuery, ignoreCase = true)&#10;                    }&#10;                }&#10;&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentPadding = PaddingValues(vertical = 12.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    items(filteredCoins) { coin -&gt;&#10;                        CoinListItem(&#10;                            coin = coin,&#10;                            onItemClick = {&#10;                                navController.navigate(Screen.CoinDetailScreen.route + &quot;/${coin.id}&quot;)&#10;                            }&#10;                        )&#10;                    }&#10;&#10;                    if (filteredCoins.isEmpty() &amp;&amp; searchQuery.isNotBlank()) {&#10;                        item {&#10;                            // No Results - Flat Design&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(20.dp)&#10;                                    .background(&#10;                                        color = CardBackgroundGray,&#10;                                        shape = RoundedCornerShape(16.dp)&#10;                                    )&#10;                                    .border(&#10;                                        width = 1.dp,&#10;                                        color = BorderLight,&#10;                                        shape = RoundedCornerShape(16.dp)&#10;                                    )&#10;                            ) {&#10;                                Column(&#10;                                    modifier = Modifier.padding(32.dp),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;&quot;,&#10;                                        fontSize = 48.sp&#10;                                    )&#10;                                    Spacer(modifier = Modifier.height(12.dp))&#10;                                    Text(&#10;                                        text = &quot;No results found&quot;,&#10;                                        style = MaterialTheme.typography.titleMedium,&#10;                                        fontWeight = FontWeight.SemiBold,&#10;                                        color = TextPrimary&#10;                                    )&#10;                                    Spacer(modifier = Modifier.height(4.dp))&#10;                                    Text(&#10;                                        text = &quot;Try searching for a different cryptocurrency&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        color = TextSecondary,&#10;                                        textAlign = TextAlign.Center&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/coin_list/CoinListState.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/coin_list/CoinListState.kt" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.presentation.coin_list&#10;&#10;import com.example.cryptocurrencyapp.domain.model.Coin&#10;&#10;data class CoinListState(&#10;    val isLoading: Boolean = false,&#10;    val coins: List&lt;Coin&gt; = emptyList(),&#10;    val error: String = &quot;&quot;&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/coin_list/components/CoinListItem.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/coin_list/components/CoinListItem.kt" />
              <option name="originalContent" value="package com.example.cryptocurrencyapp.presentation.coin_list.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.cryptocurrencyapp.domain.model.Coin&#10;import com.example.cryptocurrencyapp.presentation.ui.theme.*&#10;&#10;@Composable&#10;fun CoinListItem(&#10;    coin: Coin,&#10;    onItemClick: (Coin) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable { onItemClick(coin) },&#10;        elevation = CardDefaults.cardElevation(&#10;            defaultElevation = 2.dp,&#10;            pressedElevation = 8.dp&#10;        ),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        ),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                // Coin Avatar/Icon&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(48.dp)&#10;                        .clip(CircleShape)&#10;                        .background(&#10;                            brush = androidx.compose.ui.graphics.Brush.linearGradient(&#10;                                colors = listOf(&#10;                                    Primary.copy(alpha = 0.2f),&#10;                                    Secondary.copy(alpha = 0.2f)&#10;                                )&#10;                            )&#10;                        ),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = coin.symbol.take(3).uppercase(),&#10;                        style = MaterialTheme.typography.labelLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Primary,&#10;                        fontSize = 12.sp&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;&#10;                Column(&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&#10;                        text = coin.name,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = MaterialTheme.colorScheme.onSurface,&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = coin.symbol.uppercase(),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = TextSecondary,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;&#10;                        // Rank Badge&#10;                        Surface(&#10;                            shape = RoundedCornerShape(8.dp),&#10;                            color = if (coin.rank &lt;= 10) {&#10;                                Success.copy(alpha = 0.1f)&#10;                            } else if (coin.rank &lt;= 50) {&#10;                                Warning.copy(alpha = 0.1f)&#10;                            } else {&#10;                                TextSecondary.copy(alpha = 0.1f)&#10;                            }&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;#${coin.rank}&quot;,&#10;                                style = MaterialTheme.typography.labelSmall,&#10;                                color = if (coin.rank &lt;= 10) {&#10;                                    Success&#10;                                } else if (coin.rank &lt;= 50) {&#10;                                    Warning&#10;                                } else {&#10;                                    TextSecondary&#10;                                },&#10;                                fontWeight = FontWeight.Medium,&#10;                                modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Column(&#10;                horizontalAlignment = Alignment.End&#10;            ) {&#10;                // Activity Indicator&#10;                Surface(&#10;                    shape = CircleShape,&#10;                    color = if (coin.isActive) Success else Error,&#10;                    modifier = Modifier.size(12.dp)&#10;                ) {}&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = if (coin.isActive) &quot;Active&quot; else &quot;Inactive&quot;,&#10;                    style = MaterialTheme.typography.labelSmall,&#10;                    color = if (coin.isActive) Success else Error,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.presentation.coin_list.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.cryptocurrencyapp.domain.model.Coin&#10;import com.example.cryptocurrencyapp.presentation.ui.theme.*&#10;&#10;@Composable&#10;fun CoinListItem(&#10;    coin: Coin,&#10;    onItemClick: (Coin) -&gt; Unit&#10;) {&#10;    // Pure Flat Card Design - No Shadows or Gradients&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable { onItemClick(coin) },&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(0.dp), // Flat design - no elevation&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Coin Info Section&#10;            Row(&#10;                modifier = Modifier.weight(1f),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                // Coin Icon - Flat Circle Design&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(48.dp)&#10;                        .background(&#10;                            color = MaterialTheme.colorScheme.primaryContainer,&#10;                            shape = CircleShape&#10;                        )&#10;                        .border(&#10;                            width = 2.dp,&#10;                            color = MaterialTheme.colorScheme.primary.copy(alpha = 0.2f),&#10;                            shape = CircleShape&#10;                        ),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = coin.symbol.take(2).uppercase(),&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;&#10;                // Coin Details&#10;                Column {&#10;                    Text(&#10;                        text = coin.name,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = MaterialTheme.colorScheme.onSurface,&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                    Text(&#10;                        text = coin.symbol.uppercase(),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Status and Rank Section&#10;            Column(&#10;                horizontalAlignment = Alignment.End&#10;            ) {&#10;                // Rank Badge - Flat Design&#10;                Surface(&#10;                    color = MaterialTheme.colorScheme.secondaryContainer,&#10;                    shape = RoundedCornerShape(8.dp),&#10;                    modifier = Modifier.border(&#10;                        1.dp,&#10;                        MaterialTheme.colorScheme.secondary.copy(alpha = 0.3f),&#10;                        RoundedCornerShape(8.dp)&#10;                    )&#10;                ) {&#10;                    Text(&#10;                        text = &quot;#${coin.rank}&quot;,&#10;                        modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp),&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.secondary&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                // Status Indicator - Flat Design&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(8.dp)&#10;                            .background(&#10;                                color = if (coin.isActive) Success else Error,&#10;                                shape = CircleShape&#10;                            )&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.width(6.dp))&#10;&#10;                    Text(&#10;                        text = if (coin.isActive) &quot;Active&quot; else &quot;Inactive&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = if (coin.isActive) Success else Error,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/components/HtmlRichText.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/components/HtmlRichText.kt" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.presentation.components&#10;&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.sp&#10;&#10;@Composable&#10;fun HtmlText(&#10;    htmlContent: String,&#10;    modifier: Modifier = Modifier,&#10;    textColor: Color = MaterialTheme.colorScheme.onSurface&#10;) {&#10;    // تنظيف HTML بدون مكتبات خارجية - طريقة آمنة وموثوقة&#10;    val cleanText = htmlContent&#10;        .replace(&quot;&lt;p&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;/p&gt;&quot;, &quot;\n\n&quot;)&#10;        .replace(&quot;&lt;br&gt;&quot;, &quot;\n&quot;)&#10;        .replace(&quot;&lt;br/&gt;&quot;, &quot;\n&quot;)&#10;        .replace(&quot;&lt;br /&gt;&quot;, &quot;\n&quot;)&#10;        .replace(&quot;&lt;strong&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;/strong&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;b&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;/b&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;em&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;/em&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;i&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;/i&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;u&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;/u&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;h1&gt;&quot;, &quot;\n&quot;)&#10;        .replace(&quot;&lt;/h1&gt;&quot;, &quot;\n&quot;)&#10;        .replace(&quot;&lt;h2&gt;&quot;, &quot;\n&quot;)&#10;        .replace(&quot;&lt;/h2&gt;&quot;, &quot;\n&quot;)&#10;        .replace(&quot;&lt;h3&gt;&quot;, &quot;\n&quot;)&#10;        .replace(&quot;&lt;/h3&gt;&quot;, &quot;\n&quot;)&#10;        .replace(&quot;&lt;li&gt;&quot;, &quot;• &quot;)&#10;        .replace(&quot;&lt;/li&gt;&quot;, &quot;\n&quot;)&#10;        .replace(&quot;&lt;ul&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;/ul&gt;&quot;, &quot;\n&quot;)&#10;        .replace(&quot;&lt;ol&gt;&quot;, &quot;&quot;)&#10;        .replace(&quot;&lt;/ol&gt;&quot;, &quot;\n&quot;)&#10;        .replace(&quot;&amp;amp;&quot;, &quot;&amp;&quot;)&#10;        .replace(&quot;&amp;lt;&quot;, &quot;&lt;&quot;)&#10;        .replace(&quot;&amp;gt;&quot;, &quot;&gt;&quot;)&#10;        .replace(&quot;&amp;quot;&quot;, &quot;\&quot;&quot;)&#10;        .replace(&quot;&amp;#39;&quot;, &quot;'&quot;)&#10;        .replace(&quot;&amp;nbsp;&quot;, &quot; &quot;)&#10;        .replace(&quot;&amp;copy;&quot;, &quot;©&quot;)&#10;        .replace(&quot;&amp;reg;&quot;, &quot;®&quot;)&#10;        .replace(&quot;&amp;trade;&quot;, &quot;™&quot;)&#10;        .replace(Regex(&quot;&lt;[^&gt;]*&gt;&quot;), &quot;&quot;) // إزالة أي علامات HTML متبقية&#10;        .replace(Regex(&quot;\\s+&quot;), &quot; &quot;) // إزالة المسافات المتعددة&#10;        .replace(&quot;\n &quot;, &quot;\n&quot;) // تنظيف السطور&#10;        .trim()&#10;&#10;    Text(&#10;        text = cleanText,&#10;        modifier = modifier,&#10;        style = MaterialTheme.typography.bodyMedium.copy(&#10;            color = textColor,&#10;            lineHeight = 24.sp,&#10;            textAlign = TextAlign.Start&#10;        )&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/components/NoInternetScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/components/NoInternetScreen.kt" />
              <option name="originalContent" value="&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.presentation.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import com.example.cryptocurrencyapp.presentation.ui.theme.*&#10;import compose.icons.FeatherIcons&#10;import compose.icons.feathericons.RefreshCw&#10;import compose.icons.feathericons.WifiOff&#10;&#10;@Composable&#10;fun NoInternetScreen(&#10;    onRetry: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(20.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        // Pure Flat Design Card for No Internet&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.surface&#10;            ),&#10;            elevation = CardDefaults.cardElevation(0.dp), // Flat design - no elevation&#10;            shape = RoundedCornerShape(20.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(32.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                // WiFi Off Icon - Modern Flat Design with Feather Icons&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(80.dp)&#10;                        .background(&#10;                            color = Error.copy(alpha = 0.1f),&#10;                            shape = RoundedCornerShape(16.dp)&#10;                        )&#10;                        .border(&#10;                            width = 2.dp,&#10;                            color = Error.copy(alpha = 0.3f),&#10;                            shape = RoundedCornerShape(16.dp)&#10;                        ),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Icon(&#10;                        imageVector = FeatherIcons.WifiOff,&#10;                        contentDescription = &quot;No Internet&quot;,&#10;                        tint = Error,&#10;                        modifier = Modifier.size(40.dp)&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                Text(&#10;                    text = &quot;No Internet Connection&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                Text(&#10;                    text = &quot;Please check your internet connection and try again.&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    textAlign = TextAlign.Center&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                // Retry Button - Flat Design with Modern Icon&#10;                Button(&#10;                    onClick = onRetry,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = MaterialTheme.colorScheme.primary,&#10;                        contentColor = MaterialTheme.colorScheme.onPrimary&#10;                    ),&#10;                    elevation = ButtonDefaults.buttonElevation(0.dp), // Flat design&#10;                    shape = RoundedCornerShape(12.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = FeatherIcons.RefreshCw,&#10;                        contentDescription = &quot;Retry&quot;,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&#10;                        text = &quot;Try Again&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.SemiBold&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/components/ThemeToggle.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/components/ThemeToggle.kt" />
              <option name="originalContent" value="&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.presentation.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.DarkMode&#10;import androidx.compose.material.icons.filled.LightMode&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import com.example.cryptocurrencyapp.presentation.ui.theme.ThemeManager&#10;import compose.icons.FeatherIcons&#10;import compose.icons.feathericons.Moon&#10;import compose.icons.feathericons.Sun&#10;&#10;@Composable&#10;fun ThemeToggleButton(&#10;    themeManager: ThemeManager,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val isDarkTheme by themeManager.isDarkTheme.collectAsState()&#10;&#10;    Card(&#10;        modifier = modifier&#10;            .size(48.dp)&#10;            .clip(CircleShape)&#10;            .clickable { themeManager.toggleTheme() },&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.primaryContainer&#10;        ),&#10;        elevation = CardDefaults.cardElevation(0.dp) // Flat design - no elevation&#10;    ) {&#10;        Box(&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Icon(&#10;                imageVector = if (isDarkTheme) FeatherIcons.Sun else FeatherIcons.Moon,&#10;                contentDescription = if (isDarkTheme) &quot;Switch to Light Theme&quot; else &quot;Switch to Dark Theme&quot;,&#10;                tint = MaterialTheme.colorScheme.onPrimaryContainer,&#10;                modifier = Modifier.size(24.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ThemeToggleSwitch(&#10;    themeManager: ThemeManager,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val isDarkTheme by themeManager.isDarkTheme.collectAsState()&#10;&#10;    Row(&#10;        modifier = modifier,&#10;        verticalAlignment = Alignment.CenterVertically,&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        Icon(&#10;            imageVector = FeatherIcons.Sun,&#10;            contentDescription = &quot;Light Theme&quot;,&#10;            tint = if (!isDarkTheme) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant,&#10;            modifier = Modifier.size(20.dp)&#10;        )&#10;&#10;        Switch(&#10;            checked = isDarkTheme,&#10;            onCheckedChange = { themeManager.setDarkTheme(it) },&#10;            colors = SwitchDefaults.colors(&#10;                checkedThumbColor = MaterialTheme.colorScheme.primary,&#10;                uncheckedThumbColor = MaterialTheme.colorScheme.outline,&#10;                checkedTrackColor = MaterialTheme.colorScheme.primaryContainer,&#10;                uncheckedTrackColor = MaterialTheme.colorScheme.surfaceVariant&#10;            )&#10;        )&#10;&#10;        Icon(&#10;            imageVector = FeatherIcons.Moon,&#10;            contentDescription = &quot;Dark Theme&quot;,&#10;            tint = if (isDarkTheme) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant,&#10;            modifier = Modifier.size(20.dp)&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/ui/theme/Color.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/ui/theme/Color.kt" />
              <option name="originalContent" value="package com.example.cryptocurrencyapp.presentation.ui.theme&#10;&#10;import androidx.compose.ui.graphics.Color&#10;&#10;// Modern Flat Design Color Palette&#10;val Purple80 = Color(0xFF6366F1)&#10;val PurpleGrey80 = Color(0xFF8B92F3)&#10;val Pink80 = Color(0xFFEC4899)&#10;&#10;val Purple40 = Color(0xFF4F46E5)&#10;val PurpleGrey40 = Color(0xFF6B7280)&#10;val Pink40 = Color(0xFFDB2777)&#10;&#10;// Custom App Colors - Modern Flat Design&#10;val Primary = Color(0xFF6366F1) // Indigo&#10;val PrimaryVariant = Color(0xFF4F46E5) // Darker Indigo&#10;val Secondary = Color(0xFF10B981) // Emerald&#10;val SecondaryVariant = Color(0xFF059669) // Darker Emerald&#10;&#10;// Background Colors&#10;val BackgroundLight = Color(0xFFFAFAFA)&#10;val BackgroundDark = Color(0xFF111827)&#10;val SurfaceLight = Color(0xFFFFFFFF)&#10;val SurfaceDark = Color(0xFF1F2937)&#10;&#10;// Text Colors&#10;val TextPrimary = Color(0xFF111827)&#10;val TextSecondary = Color(0xFF6B7280)&#10;val TextOnPrimary = Color(0xFFFFFFFF)&#10;val TextOnDark = Color(0xFFF9FAFB)&#10;&#10;// Status Colors&#10;val Success = Color(0xFF10B981)&#10;val Warning = Color(0xFFF59E0B)&#10;val Error = Color(0xFFEF4444)&#10;val Info = Color(0xFF3B82F6)&#10;&#10;// Accent Colors&#10;val Accent1 = Color(0xFF8B5CF6) // Purple&#10;val Accent2 = Color(0xFFEC4899) // Pink&#10;val Accent3 = Color(0xFF06B6D4) // Cyan&#10;&#10;// Card Colors&#10;val CardBackground = Color(0xFFFFFFFF)&#10;val CardBackgroundDark = Color(0xFF374151)&#10;val CardElevation = Color(0x08000000)&#10;&#10;// Border Colors&#10;val BorderLight = Color(0xFFE5E7EB)&#10;val BorderDark = Color(0xFF4B5563)&#10;&#10;// Price Colors&#10;val PriceUp = Color(0xFF10B981)&#10;val PriceDown = Color(0xFFEF4444)&#10;val PriceNeutral = Color(0xFF6B7280)&#10;" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.presentation.ui.theme&#10;&#10;import androidx.compose.ui.graphics.Color&#10;&#10;// Modern Flat Design Color Palette - No Gradients, Pure Colors&#10;val Purple80 = Color(0xFF7C3AED)&#10;val PurpleGrey80 = Color(0xFF6366F1)&#10;val Pink80 = Color(0xFFEC4899)&#10;&#10;val Purple40 = Color(0xFF5B21B6)&#10;val PurpleGrey40 = Color(0xFF4338CA)&#10;val Pink40 = Color(0xFFBE185D)&#10;&#10;// Custom App Colors - Pure Flat Design&#10;val Primary = Color(0xFF6366F1) // Indigo&#10;val PrimaryVariant = Color(0xFF4F46E5) // Darker Indigo&#10;val Secondary = Color(0xFF10B981) // Emerald&#10;val SecondaryVariant = Color(0xFF059669) // Darker Emerald&#10;&#10;// Background Colors - Flat&#10;val BackgroundLight = Color(0xFFF8FAFC)&#10;val BackgroundDark = Color(0xFF0F172A)&#10;val SurfaceLight = Color(0xFFFFFFFF)&#10;val SurfaceDark = Color(0xFF1E293B)&#10;&#10;// Text Colors&#10;val TextPrimary = Color(0xFF0F172A)&#10;val TextSecondary = Color(0xFF64748B)&#10;val TextOnPrimary = Color(0xFFFFFFFF)&#10;val TextOnDark = Color(0xFFF1F5F9)&#10;&#10;// Status Colors - Flat&#10;val Success = Color(0xFF22C55E)&#10;val Warning = Color(0xFFF59E0B)&#10;val Error = Color(0xFFEF4444)&#10;val Info = Color(0xFF3B82F6)&#10;&#10;// Accent Colors - Modern Flat&#10;val Accent1 = Color(0xFF8B5CF6) // Purple&#10;val Accent2 = Color(0xFFEC4899) // Pink&#10;val Accent3 = Color(0xFF06B6D4) // Cyan&#10;val Accent4 = Color(0xFFF97316) // Orange&#10;val Accent5 = Color(0xFF84CC16) // Lime&#10;&#10;// Card Colors - Pure Flat&#10;val CardBackground = Color(0xFFFFFFFF)&#10;val CardBackgroundDark = Color(0xFF334155)&#10;val CardBackgroundGray = Color(0xFFF1F5F9)&#10;val CardBackgroundBlue = Color(0xFFE0F2FE)&#10;val CardBackgroundGreen = Color(0xFFECFDF5)&#10;val CardBackgroundYellow = Color(0xFFFEFCE8)&#10;val CardBackgroundPurple = Color(0xFFF3E8FF)&#10;&#10;// Border Colors - Subtle&#10;val BorderLight = Color(0xFFE2E8F0)&#10;val BorderDark = Color(0xFF475569)&#10;&#10;// Price Colors&#10;val PriceUp = Color(0xFF22C55E)&#10;val PriceDown = Color(0xFFEF4444)&#10;val PriceNeutral = Color(0xFF64748B)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/ui/theme/Theme.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/ui/theme/Theme.kt" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.presentation.ui.theme&#10;&#10;import android.app.Activity&#10;import android.os.Build&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.material3.dynamicDarkColorScheme&#10;import androidx.compose.material3.dynamicLightColorScheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.SideEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.graphics.toArgb&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.platform.LocalView&#10;import androidx.core.view.WindowCompat&#10;&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = Primary,&#10;    onPrimary = TextOnPrimary,&#10;    primaryContainer = PrimaryVariant,&#10;    onPrimaryContainer = TextOnPrimary,&#10;    secondary = Secondary,&#10;    onSecondary = TextOnPrimary,&#10;    secondaryContainer = SecondaryVariant,&#10;    onSecondaryContainer = TextOnPrimary,&#10;    tertiary = Accent1,&#10;    onTertiary = TextOnPrimary,&#10;    background = BackgroundDark,&#10;    onBackground = TextOnDark,&#10;    surface = SurfaceDark,&#10;    onSurface = TextOnDark,&#10;    surfaceVariant = CardBackgroundDark,&#10;    onSurfaceVariant = TextOnDark,&#10;    error = Error,&#10;    onError = TextOnPrimary,&#10;    outline = BorderDark,&#10;    inverseOnSurface = TextPrimary,&#10;    inverseSurface = SurfaceLight,&#10;    inversePrimary = PrimaryVariant,&#10;    surfaceTint = Primary,&#10;    outlineVariant = BorderDark,&#10;    scrim = BackgroundDark&#10;)&#10;&#10;private val LightColorScheme = lightColorScheme(&#10;    primary = Primary,&#10;    onPrimary = TextOnPrimary,&#10;    primaryContainer = androidx.compose.ui.graphics.Color(0xFFEEF2FF),&#10;    onPrimaryContainer = PrimaryVariant,&#10;    secondary = Secondary,&#10;    onSecondary = TextOnPrimary,&#10;    secondaryContainer = androidx.compose.ui.graphics.Color(0xFFD1FAE5),&#10;    onSecondaryContainer = SecondaryVariant,&#10;    tertiary = Accent1,&#10;    onTertiary = TextOnPrimary,&#10;    background = BackgroundLight,&#10;    onBackground = TextPrimary,&#10;    surface = SurfaceLight,&#10;    onSurface = TextPrimary,&#10;    surfaceVariant = CardBackground,&#10;    onSurfaceVariant = TextPrimary,&#10;    error = Error,&#10;    onError = TextOnPrimary,&#10;    outline = BorderLight,&#10;    inverseOnSurface = TextOnDark,&#10;    inverseSurface = SurfaceDark,&#10;    inversePrimary = Primary,&#10;    surfaceTint = Primary,&#10;    outlineVariant = BorderLight,&#10;    scrim = BackgroundLight&#10;)&#10;&#10;@Composable&#10;fun CryptoCurrencyAppTheme(&#10;    themeManager: ThemeManager? = null,&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    // Dynamic color is available on Android 12+&#10;    dynamicColor: Boolean = false,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    // Use ThemeManager if provided, otherwise fall back to system theme&#10;    val isDarkTheme = if (themeManager != null) {&#10;        val isDark by themeManager.isDarkTheme.collectAsState()&#10;        isDark&#10;    } else {&#10;        darkTheme&#10;    }&#10;&#10;    val colorScheme = when {&#10;        dynamicColor &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S -&gt; {&#10;            val context = LocalContext.current&#10;            if (isDarkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)&#10;        }&#10;&#10;        isDarkTheme -&gt; DarkColorScheme&#10;        else -&gt; LightColorScheme&#10;    }&#10;    val view = LocalView.current&#10;    if (!view.isInEditMode) {&#10;        SideEffect {&#10;            val window = (view.context as Activity).window&#10;            window.statusBarColor = colorScheme.primary.toArgb()&#10;            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars = !isDarkTheme&#10;        }&#10;    }&#10;&#10;    MaterialTheme(&#10;        colorScheme = colorScheme,&#10;        typography = Typography,&#10;        content = content&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/ui/theme/ThemeManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/ui/theme/ThemeManager.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.presentation.ui.theme&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class ThemeManager @Inject constructor() {&#10;    private val _isDarkTheme = MutableStateFlow(false)&#10;    val isDarkTheme: StateFlow&lt;Boolean&gt; = _isDarkTheme.asStateFlow()&#10;&#10;    fun toggleTheme() {&#10;        _isDarkTheme.value = !_isDarkTheme.value&#10;    }&#10;&#10;    fun setDarkTheme(isDark: Boolean) {&#10;        _isDarkTheme.value = isDark&#10;    }&#10;}&#10;&#10;@Composable&#10;fun rememberThemeManager(): ThemeManager {&#10;    return ThemeManager()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/ui/theme/Type.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/ui/theme/Type.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.presentation.ui.theme&#10;&#10;import androidx.compose.material3.Typography&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.sp&#10;&#10;// Modern Typography System using default fonts&#10;val Typography = Typography(&#10;    // Large titles&#10;    displayLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Bold,&#10;        fontSize = 36.sp,&#10;        lineHeight = 44.sp,&#10;        letterSpacing = (-0.5).sp&#10;    ),&#10;    displayMedium = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Bold,&#10;        fontSize = 32.sp,&#10;        lineHeight = 40.sp,&#10;        letterSpacing = (-0.25).sp&#10;    ),&#10;    displaySmall = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.SemiBold,&#10;        fontSize = 28.sp,&#10;        lineHeight = 36.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;&#10;    // Headlines&#10;    headlineLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.SemiBold,&#10;        fontSize = 24.sp,&#10;        lineHeight = 32.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    headlineMedium = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.SemiBold,&#10;        fontSize = 22.sp,&#10;        lineHeight = 28.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    headlineSmall = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 20.sp,&#10;        lineHeight = 26.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;&#10;    // Titles&#10;    titleLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.SemiBold,&#10;        fontSize = 18.sp,&#10;        lineHeight = 24.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    titleMedium = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 16.sp,&#10;        lineHeight = 22.sp,&#10;        letterSpacing = 0.1.sp&#10;    ),&#10;    titleSmall = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 14.sp,&#10;        lineHeight = 20.sp,&#10;        letterSpacing = 0.1.sp&#10;    ),&#10;&#10;    // Body text&#10;    bodyLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 16.sp,&#10;        lineHeight = 24.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    bodyMedium = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 14.sp,&#10;        lineHeight = 20.sp,&#10;        letterSpacing = 0.25.sp&#10;    ),&#10;    bodySmall = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 12.sp,&#10;        lineHeight = 16.sp,&#10;        letterSpacing = 0.4.sp&#10;    ),&#10;&#10;    // Labels&#10;    labelLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 14.sp,&#10;        lineHeight = 20.sp,&#10;        letterSpacing = 0.1.sp&#10;    ),&#10;    labelMedium = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 12.sp,&#10;        lineHeight = 16.sp,&#10;        letterSpacing = 0.5.sp&#10;    ),&#10;    labelSmall = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 11.sp,&#10;        lineHeight = 14.sp,&#10;        letterSpacing = 0.5.sp&#10;    )&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/utils/HtmlUtils.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/cryptocurrencyapp/presentation/utils/HtmlUtils.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.example.cryptocurrencyapp.presentation.utils&#10;&#10;import android.text.Html&#10;import android.text.Spanned&#10;import androidx.compose.foundation.text.selection.SelectionContainer&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.AnnotatedString&#10;import androidx.compose.ui.text.buildAnnotatedString&#10;&#10;/**&#10; * Remove HTML tags from text and return clean string&#10; */&#10;fun removeHtmlTags(htmlText: String?): String {&#10;    return if (htmlText.isNullOrEmpty()) {&#10;        &quot;&quot;&#10;    } else {&#10;        Html.fromHtml(htmlText, Html.FROM_HTML_MODE_LEGACY).toString().trim()&#10;    }&#10;}&#10;&#10;/**&#10; * Convert HTML text to AnnotatedString for better formatting in Compose&#10; */&#10;fun htmlToAnnotatedString(htmlText: String?): AnnotatedString {&#10;    if (htmlText.isNullOrEmpty()) return AnnotatedString(&quot;&quot;)&#10;&#10;    val spanned: Spanned = Html.fromHtml(htmlText, Html.FROM_HTML_MODE_LEGACY)&#10;    return buildAnnotatedString {&#10;        append(spanned.toString())&#10;&#10;        // You can add custom styling here based on HTML tags if needed&#10;        // For now, we'll keep it simple and clean&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HtmlText(&#10;    html: String,&#10;    modifier: Modifier = Modifier,&#10;    color: Color = MaterialTheme.colorScheme.onSurface&#10;) {&#10;    val cleanText = removeHtmlTags(html)&#10;&#10;    SelectionContainer {&#10;        Text(&#10;            text = cleanText,&#10;            modifier = modifier,&#10;            color = color,&#10;            style = MaterialTheme.typography.bodyMedium&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/build.gradle.kts" />
              <option name="originalContent" value="// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;plugins {&#10;    alias(libs.plugins.android.application) apply false&#10;    alias(libs.plugins.jetbrains.kotlin.android) apply false&#10;    id(&quot;com.google.dagger.hilt.android&quot;) version &quot;2.51.1&quot; apply false&#10;&#10;&#10;}" />
              <option name="updatedContent" value="// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;plugins {&#10;    alias(libs.plugins.android.application) apply false&#10;    alias(libs.plugins.jetbrains.kotlin.android) apply false&#10;    id(&quot;com.google.dagger.hilt.android&quot;) version &quot;2.51.1&quot; apply false&#10;    id(&quot;com.google.devtools.ksp&quot;) version &quot;1.9.0-1.0.13&quot; apply false&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle.properties" />
              <option name="originalContent" value="# Project-wide Gradle settings.&#10;# IDE (e.g. Android Studio) users:&#10;# Gradle settings configured through the IDE *will override*&#10;# any settings specified in this file.&#10;# For more details on how to configure your build environment visit&#10;# http://www.gradle.org/docs/current/userguide/build_environment.html&#10;# Specifies the JVM arguments used for the daemon process.&#10;# The setting is particularly useful for tweaking memory settings.&#10;org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8&#10;# When configured, Gradle will run in incubating parallel mode.&#10;# This option should only be used with decoupled projects. For more details, visit&#10;# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects&#10;# org.gradle.parallel=true&#10;# AndroidX package structure to make it clearer which packages are bundled with the&#10;# Android operating system, and which are packaged with your app's APK&#10;# https://developer.android.com/topic/libraries/support-library/androidx-rn&#10;android.useAndroidX=true&#10;# Kotlin code style for this project: &quot;official&quot; or &quot;obsolete&quot;:&#10;kotlin.code.style=official&#10;# Enables namespacing of each library's R class so that its R class includes only the&#10;# resources declared in the library itself and none from the library's dependencies,&#10;# thereby reducing the size of the R class for that library&#10;android.nonTransitiveRClass=true&#10;&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="# Project-wide Gradle settings.&#10;# IDE (e.g. Android Studio) users:&#10;# Gradle settings configured through the IDE *will override*&#10;# any settings specified in this file.&#10;# For more details on how to configure your build environment visit&#10;# http://www.gradle.org/docs/current/userguide/build_environment.html&#10;# Specifies the JVM arguments used for the daemon process.&#10;# The setting is particularly useful for tweaking memory settings.&#10;org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8&#10;# When configured, Gradle will run in incubating parallel mode.&#10;# This option should only be used with decoupled projects. For more details, visit&#10;# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects&#10;# org.gradle.parallel=true&#10;# AndroidX package structure to make it clearer which packages are bundled with the&#10;# Android operating system, and which are packaged with your app's APK&#10;# https://developer.android.com/topic/libraries/support-library/androidx-rn&#10;android.useAndroidX=true&#10;# Kotlin code style for this project: &quot;official&quot; or &quot;obsolete&quot;:&#10;kotlin.code.style=official&#10;# Enables namespacing of each library's R class so that its R class includes only the&#10;# resources declared in the library itself and none from the library's dependencies,&#10;# thereby reducing the size of the R class for that library&#10;android.nonTransitiveRClass=true&#10;&#10;# Suppress warning about compileSdk 36&#10;android.suppressUnsupportedCompileSdk=36&#10;&#10;# Enable KSP incremental processing for better performance&#10;ksp.incremental=true&#10;ksp.incremental.intermodule=true" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/libs.versions.toml" />
              <option name="originalContent" value="[versions]&#10;accompanistFlowlayoutVersion = &quot;0.31.1-alpha&quot;&#10;agp = &quot;8.5.1&quot;&#10;androidxHiltNavigationCompose = &quot;1.0.0&quot;&#10;converterGson = &quot;2.11.0&quot;&#10;hiltAndroid = &quot;2.49&quot;&#10;hiltAndroidCompiler = &quot;2.44&quot;&#10;hiltAndroidCompilerVersion = &quot;2.51.1&quot;&#10;hiltAndroidVersion = &quot;2.51.1&quot;&#10;hiltNavigationComposeVersion = &quot;&lt;version&gt;&quot;&#10;kotlin = &quot;1.9.0&quot;&#10;coreKtx = &quot;1.13.1&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.2.1&quot;&#10;espressoCore = &quot;3.6.1&quot;&#10;kotlinxCoroutinesAndroid = &quot;1.7.3&quot;&#10;lifecycleRuntimeKtx = &quot;2.8.6&quot;&#10;activityCompose = &quot;1.9.2&quot;&#10;composeBom = &quot;2024.04.01&quot;&#10;retrofit = &quot;2.11.0&quot;&#10;navigationRuntimeKtx = &quot;2.8.3&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;androidx-hilt-navigation-compose = { module = &quot;androidx.hilt:hilt-navigation-compose&quot;, version.ref = &quot;hiltNavigationComposeVersion&quot; }&#10;androidx-hilt-navigation-compose-v100 = { module = &quot;androidx.hilt:hilt-navigation-compose&quot;, version.ref = &quot;androidxHiltNavigationCompose&quot; }&#10;converter-gson = { module = &quot;com.squareup.retrofit2:converter-gson&quot;, version.ref = &quot;converterGson&quot; }&#10;google-accompanist-flowlayout = { module = &quot;com.google.accompanist:accompanist-flowlayout&quot;, version.ref = &quot;accompanistFlowlayoutVersion&quot; }&#10;hilt-android = { module = &quot;com.google.dagger:hilt-android&quot;, version.ref = &quot;hiltAndroid&quot; }&#10;hilt-android-compiler = { module = &quot;com.google.dagger:hilt-android-compiler&quot;, version.ref = &quot;hiltAndroidCompiler&quot; }&#10;hilt-android-compiler-v2511 = { module = &quot;com.google.dagger:hilt-android-compiler&quot;, version.ref = &quot;hiltAndroidCompilerVersion&quot; }&#10;hilt-android-v2511 = { module = &quot;com.google.dagger:hilt-android&quot;, version.ref = &quot;hiltAndroidVersion&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;kotlinx-coroutines-android = { module = &quot;org.jetbrains.kotlinx:kotlinx-coroutines-android&quot;, version.ref = &quot;kotlinxCoroutinesAndroid&quot; }&#10;retrofit = { module = &quot;com.squareup.retrofit2:retrofit&quot;, version.ref = &quot;retrofit&quot; }&#10;androidx-navigation-runtime-ktx = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-runtime-ktx&quot;, version.ref = &quot;navigationRuntimeKtx&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;jetbrains-kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;&#10;" />
              <option name="updatedContent" value="[versions]&#10;accompanistFlowlayoutVersion = &quot;0.31.1-alpha&quot;&#10;agp = &quot;8.6.0&quot;&#10;androidxHiltNavigationCompose = &quot;1.0.0&quot;&#10;converterGson = &quot;2.11.0&quot;&#10;hiltAndroid = &quot;2.49&quot;&#10;hiltAndroidCompiler = &quot;2.44&quot;&#10;hiltAndroidCompilerVersion = &quot;2.51.1&quot;&#10;hiltAndroidVersion = &quot;2.51.1&quot;&#10;hiltNavigationComposeVersion = &quot;&lt;version&gt;&quot;&#10;kotlin = &quot;1.9.0&quot;&#10;coreKtx = &quot;1.13.1&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.2.1&quot;&#10;espressoCore = &quot;3.6.1&quot;&#10;kotlinxCoroutinesAndroid = &quot;1.7.3&quot;&#10;lifecycleRuntimeKtx = &quot;2.8.6&quot;&#10;activityCompose = &quot;1.9.2&quot;&#10;composeBom = &quot;2024.04.01&quot;&#10;retrofit = &quot;2.11.0&quot;&#10;navigationRuntimeKtx = &quot;2.8.3&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;androidx-hilt-navigation-compose = { module = &quot;androidx.hilt:hilt-navigation-compose&quot;, version.ref = &quot;hiltNavigationComposeVersion&quot; }&#10;androidx-hilt-navigation-compose-v100 = { module = &quot;androidx.hilt:hilt-navigation-compose&quot;, version.ref = &quot;androidxHiltNavigationCompose&quot; }&#10;converter-gson = { module = &quot;com.squareup.retrofit2:converter-gson&quot;, version.ref = &quot;converterGson&quot; }&#10;google-accompanist-flowlayout = { module = &quot;com.google.accompanist:accompanist-flowlayout&quot;, version.ref = &quot;accompanistFlowlayoutVersion&quot; }&#10;hilt-android = { module = &quot;com.google.dagger:hilt-android&quot;, version.ref = &quot;hiltAndroid&quot; }&#10;hilt-android-compiler = { module = &quot;com.google.dagger:hilt-android-compiler&quot;, version.ref = &quot;hiltAndroidCompiler&quot; }&#10;hilt-android-compiler-v2511 = { module = &quot;com.google.dagger:hilt-android-compiler&quot;, version.ref = &quot;hiltAndroidCompilerVersion&quot; }&#10;hilt-android-v2511 = { module = &quot;com.google.dagger:hilt-android&quot;, version.ref = &quot;hiltAndroidVersion&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;kotlinx-coroutines-android = { module = &quot;org.jetbrains.kotlinx:kotlinx-coroutines-android&quot;, version.ref = &quot;kotlinxCoroutinesAndroid&quot; }&#10;retrofit = { module = &quot;com.squareup.retrofit2:retrofit&quot;, version.ref = &quot;retrofit&quot; }&#10;androidx-navigation-runtime-ktx = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-runtime-ktx&quot;, version.ref = &quot;navigationRuntimeKtx&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;jetbrains-kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>